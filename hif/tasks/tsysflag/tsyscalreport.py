from __future__ import absolute_import

import os.path
import sys
import traceback

import pipeline.infrastructure as infrastructure
import pipeline.infrastructure.displays as displays
import pipeline.infrastructure.taskreport as taskreport
import pipeline.infrastructure.logging as logging

LOG = logging.get_logger(__name__)


class TsyscalReportInputs(object):
    def __init__(self, context, result, task_name):
        self.context = context
        self.result = result
        self.link_name = '%s %s' % (context.stage, task_name)
        

class TsyscalReport(taskreport.TaskReport):
    Inputs = TsyscalReportInputs
    
    def execute(self, dry_run=False):
        
        inputs = self.inputs

        logger = inputs.context.logger
        logger.logHTML('<li>')
        logger.openNode(inputs.link_name, inputs.link_name, True)

        context = self.inputs.context
        result = self.inputs.result
       
        try:
            logger.logHTML('<h2>Description</h2>')
            logger.logHTML('<h2>Results</h2>')

            # following does not work with latest result structure

#            if result.caltables:
#                description = '''The following calibration tables were 
#                 generated by this task:<ul>'''
#                for caltable in result.caltables:
#                    description += '<li>%s from %s' % (
#                     os.path.basename(caltable.name), caltable.job)
#                description += '</ul>'
#            else:
#                description = '''No calibration tables were generated by this 
#                 task.'''
#            logger.logHTML(description)

            heading = True 

            # display the view first; the Tsys shape metric
            if result.view:
                display_inputs = displays.ImageDisplay.Inputs(context, result)

                # plot() returns the list of Plots it has generated, so we just
                # need to add each one to the HTML logger with logger.addPlot()
                plots = displays.ImageDisplay(display_inputs).plot()
                if plots and heading:
                    logger.logHTML('<h3>Displays</h3>')
                    heading = False
                map(logger.addPlot, plots)

            # now display the Tsys data themselves
            for description in result.descriptions():
                childresults = result.getchild(description, 'tsysmedians')
                display_inputs = displays.SliceDisplay.Inputs(context, 
                 childresults)

                plots = displays.SliceDisplay(display_inputs).plot()
                if plots and heading:
                    logger.logHTML('<h3>Displays</h3>')
                    heading = False
                map(logger.addPlot, plots)

                for desc2 in childresults.descriptions():
                    child2 = childresults.getchild(desc2, 'tsysspectra')
                    display_inputs = displays.SliceDisplay.Inputs(context, 
                     child2)

                    if plots and heading:
                        logger.logHTML('<h3>Displays</h3>')
                        heading = False
                    plots = displays.SliceDisplay(display_inputs).plot()
                    map(logger.addPlot, plots)

        except KeyboardInterrupt:
            print 'keyboard interrupt in doStage' 
            raise 
        except:
            logger.logHTML('<p>Failed with exception<pre>')
            traceback.print_exc()
            raise
#            traceback.print_exc(file=logger._htmlFiles[-1][0])
#            logger.logHTML('</pre>')
#            logger.closeNode()
#            logger.logHTML('<font color="red">Failed</font>')
        finally:
            logger.closeNode()
            sys.stdout.flush()
            return result


class TsyscalShortReport(taskreport.TaskReport):
    Inputs = TsyscalReportInputs
    
    def execute(self, dry_run=False):
        
        inputs = self.inputs

        logger = inputs.context.logger
        logger.logHTML('<li>')
        logger.openNode(inputs.link_name, inputs.link_name, True)

        context = self.inputs.context
        result = self.inputs.result
       
        try:
            logger.logHTML('<h2>Description</h2>')
            logger.logHTML('<h2>Results</h2>')

#            if result.caltables:
#                description = '''The following calibration tables were 
#                 generated by this task:<ul>'''
#                for caltable in result.caltables:
#                    description += '<li>%s from %s' % (
#                     os.path.basename(caltable.name), caltable.job)
#                description += '</ul>'
#            else:
#                description = '''No calibration tables were generated by this 
#                 task.'''
#            logger.logHTML(description)

            heading = True 

            # display the view; the Tsys shape metric
            if result.view:
                display_inputs = displays.ImageDisplay.Inputs(context, result)

                # plot() returns the list of Plots it has generated, so we just
                # need to add each one to the HTML logger with logger.addPlot()
                plots = displays.ImageDisplay(display_inputs).plot()
                if plots and heading:
                    logger.logHTML('<h3>Displays</h3>')
                    heading = False
                map(logger.addPlot, plots)

        except KeyboardInterrupt:
            print 'keyboard interrupt in doStage' 
            raise 
        except:
            logger.logHTML('<p>Failed with exception<pre>')
            traceback.print_exc()
            raise
#            traceback.print_exc(file=logger._htmlFiles[-1][0])
#            logger.logHTML('</pre>')
#            logger.closeNode()
#            logger.logHTML('<font color="red">Failed</font>')
        finally:
            logger.closeNode()
            sys.stdout.flush()
            return result


class TsyscalNullReport(taskreport.TaskReport):
    Inputs = TsyscalReportInputs
    
    def execute(self, dry_run=False):
        result = self.inputs.result
        return result
            
