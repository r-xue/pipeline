<casaxml xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd file:///opt/casa/code/xmlcasa/xml/casa.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://casa.nrao.edu/schema/psetTypes.html">

<task category="pipeline" name="hifa_bpsolint" type="function">

<shortdescription>Compute optimal bandpass calibration solution intervals</shortdescription>
<description>
The optimal bandpass phaseup time and frequency solution intervals required to
achieve the required signal to noise ratio is estimated based on nominal ALMA
array characteristics the meta data associated with the observation.
</description>

<input>

   <param subparam="true" name="vis" type="stringVec">
	<description>List of input MeasurementSets</description>
	<value/>
   </param>

   <param subparam="true" name="field" type="string">
	<description>Set of data selection field names</description>
	<value/>
   </param>

   <param subparam="true" name="intent" type="string">
	<description>Set of data selection observing intents</description>
	<value>BANDPASS</value>
   </param>

   <param subparam="true" name="spw" type="string">
	<description>Set of data selection spectral window ids</description>
	<value/>
   </param>

   <param name="phaseupsnr" type="double">
	<description>The required bandpass phaseup signal to noise</description>
	<value>20.0</value>
   </param>

   <param name="minphaseupints" type="int">
	<description>The minimum number of phaseup intervals in the time solution</description>
	<value>2</value>
   </param>

   <param name="evenbpints" type="bool">
	<description>Force the bandpass frequency solution intervals to be an even number of channels</description>
	<value>False</value>
   </param>

   <param name="bpsnr" type="double">
	<description>The required bandpass frequency solution signal to noise</description>
	<value>50.0</value>
   </param>

   <param name="minbpsnr" type="double">
	<description>The minimum required bandpass frequency solution signal to noise when strong atmospheric lines exist in Tsys spectra</description>
	<value>20.0</value>
   </param>

    <param name="minbpnchan" type="int">
	<description>The minimum number of channels in the frequency solution</description>
	<value type="int">8</value>
    </param>

   <param name="hm_nantennas" type="string">
	<description>The antenna selection heuristic (unsupported) </description>
	<value>all</value>
	<allowed kind="enum">
	    <value>all</value>
	    <value>unflagged</value>
	</allowed>
   </param>

   <param subparam="true" name="maxfracflagged" type="double">
	<description>The maximum fraction of data flagged per antenna (unsupported)</description>
	<value>0.90</value>
   </param>

    <param name="pipelinemode" type="string">
	<description>The pipeline operating mode</description>
	<value>automatic</value>
	<allowed kind="enum">
	    <value>automatic</value>
	    <value>interactive</value>
	    <value>getinputs</value>
	</allowed>
    </param>

    <param subparam="true" name="dryrun" type="bool">
	<description>Run task (False) or display the command(True)</description>
	<value type="bool">False</value>
    </param>

    <param subparam="true" name="acceptresults" type="bool">
	<description>Automatically accept results into the context</description>
	<value type="bool">True</value>
    </param>

    <constraints>

	<when param="hm_nantennas">
	    <equals value="all" type="string"/>
	    <equals value="unflagged" type="string">
	        <default param="maxfracflagged"><value type="double">0.90</value></default>
	    </equals>
	</when>

        <when param="pipelinemode">
	    <equals value="automatic" type="string"/>
	    <equals value="interactive" type="string">
	        <default param="vis"><value type="stringVec"/></default>
	        <default param="field"><value type="string"/></default>
	        <default param="intent"><value type="string">BANDPASS</value></default>
	        <default param="spw"><value type="string"/></default>
	        <default param="dryrun"><value type="bool">False</value></default>
	        <default param="acceptresults"><value type="bool">True</value></default>
	    </equals>
	    <equals value="getinputs" type="string">
	        <default param="vis"><value type="stringVec"/></default>
	        <default param="field"><value type="string"/></default>
	        <default param="intent"><value type="string">BANDPASS</value></default>
	        <default param="spw"><value type="string"/></default>
	    </equals>
        </when>
    </constraints>
</input>


<returns>any</returns>

<example>
Compute the bandpass phaseup time solution interval and bandpass frequency
solution interval.

---- pipeline parameter arguments which can be set in any pipeline mode

pipelinemode -- The pipeline operating mode. In 'automatic' mode the pipeline
    determines the values of all context defined pipeline inputs automatically.
    In interactive mode the user can set the pipeline context defined
    parameters manually. In 'getinputs' mode the user can check the settings of
    all pipeline parameters without running the task.

    default: 'automatic'.

phaseupnsr -- The required phaseup gain time interval solution signal to noise.

    default: 20.0
    example: phaseupsnr=10.0

minphaseupints -- The minimum number of time intervals in the phaseup gain.
    solution.

    default: 2
    example: minphaseupints=4

bpsnr -- The required bandpass frequency interval solution signal to noise.

    default: 50.0
    example: bpsnr=30.0

minbpsnr -- The minimum required bandpass frequency interval solution signal
    to noise when strong atmospheric lines exist in Tsys spectra.

    default: 20.0
    example: minbpsnr=10.0

minbpnchan -- The minimum number of frequency intervals in the bandpass
    solution.

    default: 8
    example: minbpnchan=16

hm_nantennas -- The heuristics for determines the number of antennas to use
    in the signal to noise estimate. The options are 'all' and 'unflagged'.
    The 'unflagged' options is not currently supported.

    default: 'all'
    example: hm_nantennas='unflagged'

maxfracflagged -- The maximum fraction of an antenna that can be flagged
    before it is excluded from the signal to noise estimate.

    default: 0.90
    example: maxfracflagged=0.80

---- pipeline context defined parameter arguments which can be set only in
'interactive mode'

vis -- The list of input MeasurementSets. Defaults to the list of
    MeasurementSets specified in the pipeline context

    default: ''
    example: vis=['M82A.ms', 'M82B.ms']

field -- The list of field names of sources to be used for signal to noise
    estimation. Defaults to all fields with the standard intent.

    default: ''
    example: field='3C279'

intent -- A string containing a comma delimited list of intents against which
    the selected fields are matched. Defaults to 'BANDPASS'.

    default: 'BANDPASS'
    example: intent='PHASE'

spw -- The list of spectral windows and channels for which gain solutions are
    computed. Defaults to all the science spectral windows for which there are
    both 'intent' and TARGET intents.

    default: ''
    example: spw='13,15'

--- pipeline task execution modes

dryrun -- Run the commands (True) or generate the commands to be run but
    do not execute (False).

    default: False

acceptresults -- Add the results of the task to the pipeline context (True) or
    reject them (False).

    default: True


Output

results -- If pipeline mode is 'getinputs' then None is returned. Otherwise
    the results object for the pipeline task is returned.


Description

The phaseup gain time and bandpass frequency intervals are determined as
follows:

o For each data set the list of source(s) to use for bandpass solution signal
  to noise estimation is compiled based on the values of the field, intent,
  and spw parameters. 

o Source fluxes are determined for each spw and source combination.
    o Fluxes in Jy are derived from the pipeline context.
    o Pipeline context fluxes are derived from the online flux calibrator catalog,
      the ASDM, or the user via the flux.csv file.
    o If no fluxes are available the task terminates.

o Atmospheric calibration and observations scans are determined for each spw
  and source combination. 
    o If intent is set to 'PHASE' are there are no atmospheric scans
      associated with the 'PHASE' calibrator, 'TARGET' atmospheric scans
      will be used instead.
    o If atmospheric scans cannot be associated with any of the spw and
      source combinations the task terminates.

o Science spws are mapped to atmospheric spws for each science spw and
  source combinations.
    o If mappings cannot be determined for any of the spws the task
      terminates

o The median Tsys value for each atmospheric spw and source combination is
  determined from the SYSCAL table. Medians are computed first by channel,
  then by antenna, in order to reduce sensitivity to deviant values.

o The science spw parameters, exposure time(s), and integration time(s) are
  determined.

o The phase up time interval, in time units and number of integrations required
  to meet the phaseupsnr are computed, along with the phaseup sensitivity in mJy
  and the signal to noise per integration. Nominal Tsys and sensitivity values
  per receiver band provide by the ALMA project are used for this estimate.

o Warnings are issued if estimated phaseup gain time solution would contain fewer
  than minphaseupints solutions

o The frequency interval, in MHz and number of channels required to meet the
  bpsnr are computed, along with the per channel sensitivity in mJy and the
  per channel signal to noise. Nominal Tsys and sensitivity values per receiver
  band provide by the ALMA project are used for this estimate.

o Warnings are issued if estimated bandpass solution would contain fewer than
  minbpnchan solutions

o If Tsys spectra has strong atmospheric features, the frequency interval of bandpass
  solution is recalculate with to meet the lower threshold, minbpsnr. 

Examples

1. Estimate the phaseup gain time interval and the bandpass frequency interval
required to match the desired signal to noise for bandpass solutions:

    hifa_bpsolint()
</example>
</task>
</casaxml>
