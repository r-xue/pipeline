<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd file:///opt/casa/code/xmlcasa/xml/casa.xsd">

<task category="pipeline" name="hifa_fluxcalflag" type="function">

<shortdescription>Locate and flag line regions in solar system flux calibrators</shortdescription>
<description>
Search the built-in solar system flux calibrator line catalog for overlaps with
the science spectral windows. Generate a list of line overlap regions and
flagging commands.


Output

results -- If pipeline mode is 'getinputs' then None is returned. Otherwise
    the results object for the pipeline task is returned.
</description>

<input>
    <param name="vis" subparam="true" type="stringVec">
    <shortdescription>List of input MeasurementSets</shortdescription>
        <description>The list of input MeasurementSets. Defaults to the list of
            MeasurementSets defined in the pipeline context.
        </description>
    <value/>
    </param>

    <param name="field" subparam="true" type="string">
    <shortdescription>List of field names or ids</shortdescription>
        <description>The list of field names or field ids for which the models are
            to be set. Defaults to all fields with intent 'AMPLITUDE'.

            example: field='3C279', field='3C279, M82'
        </description>
        <value type="string"/>
    </param>

    <param name="intent" subparam="true" type="string">
        <shortdescription>Observing intent of flux calibrators</shortdescription>
        <description>A string containing a comma delimited list of intents against
            which the selected fields are matched. Defaults to all data
            with amplitude intent.

            example: intent='AMPLITUDE'
        </description>
        <value/>
    </param>

    <param name="spw" subparam="true" type="string">
    <shortdescription>List of spectral window ids</shortdescription>
        <description> The list of spectral windows and channels for which bandpasses are
            computed. Defaults to all science spectral windows.

            example: spw='11,13,15,17'
        </description>
    <value/>
    </param>

    <param name="pipelinemode" type="string">
    <shortdescription>The pipeline operating mode</shortdescription>
        <description>The pipeline operating mode. In 'automatic' mode the pipeline
            determines the values of all context defined pipeline inputs automatically.
            In interactive mode the user can set the pipeline context defined
            parameters manually. In 'getinputs' mode the user can check the settings of
            all pipeline parameters without running the task.
        </description>
    <value>automatic</value>
    <allowed kind="enum">
        <value>automatic</value>
        <value>interactive</value>
        <value>getinputs</value>
    </allowed>
   </param>

    <param name="threshold" type="double">
        <shortdescription>Threshold for flagging the entire spw</shortdescription>
        <description> If the fraction of an spw occupied by line regions is greater
            then threshold flag the entire spectral window.
        </description>
        <value type="double">0.75</value>
    </param>

    <param name="appendlines" subparam="true" type="bool">
        <shortdescription>Append user defined line regions to the line dictionary</shortdescription>
        <description>Append user defined line regions to the line dictionary.</description>
        <value type="bool">False</value>
    </param>

    <param name="linesfile" subparam="true" type="string">
        <shortdescription>File containing user defined lines</shortdescription>
        <description>
        </description>
        <value type="string"/>
    </param>

    <param name="applyflags" subparam="true" type="bool">
        <shortdescription>Apply the computed flag commands</shortdescription>
        <description>
        </description>
        <value type="bool">True</value>
    </param>

    <param name="dryrun" subparam="true" type="bool">
    <shortdescription>Run the task (False) or display the commands (True)</shortdescription>
        <description>Run the commands (True) or generate the commands to be run but
            do not execute (False).
        </description>
    <value type="bool">False</value>
    </param>

    <param name="acceptresults" subparam="true" type="bool">
    <shortdescription>Automatically accept results into the context</shortdescription>
        <description>Add the results of the task to the pipeline context (True) or
            reject them (False).
        </description>
    <value type="bool">True</value>
    </param>

    <constraints>

    <when param="pipelinemode">
        <equals type="string" value="automatic"/>
        <equals type="string" value="interactive">
        <default param="vis"><value type="stringVec"/></default>
        <default param="field"><value type="string"/></default>
        <default param="intent"><value type="string"/></default>
        <default param="spw"><value type="string"/></default>
        <default param="appendlines"><value type="bool">False</value></default>
        <default param="linesfile"><value type="string"/></default>
        <default param="applyflags"><value type="bool">True</value></default>
        <default param="dryrun"><value type="bool">False</value></default>
        <default param="acceptresults"><value type="bool">True</value></default>
        </equals>
        <equals type="string" value="getinputs">
        <default param="vis"><value type="stringVec"/></default>
        <default param="field"><value type="string"/></default>
        <default param="intent"><value type="string"/></default>
        <default param="spw"><value type="string"/></default>
        <default param="appendlines"><value type="bool">False</value></default>
        <default param="linesfile"><value type="string"/></default>
        <default param="applyflags"><value type="bool">True</value></default>
        </equals>
    </when>

   </constraints>

</input>


<returns>any</returns>

<example>
1. Locate known lines in any solar system object flux calibrators:

    hifa_fluxcalflag()
</example>
</task>
</casaxml>
