<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd file:///opt/casa/code/xmlcasa/xml/casa.xsd">

<task category="pipeline" name="hifa_gfluxscaleflag" type="function">

<shortdescription>Flag the phase, pol, flux calibrators</shortdescription>

<description>
This task computes the flagging heuristics on the phase calibrator and flux
calibrator by calling hif_correctedampflag which looks for outlier
visibility points by statistically examining the scalar difference of
corrected amplitudes minus model amplitudes, and flags those outliers. The
philosophy is that only outlier data points that have remained outliers
after calibration will be flagged. The heuristic works equally well on
resolved calibrators and point sources because it is not performing a
vector difference, and thus is not sensitive to nulls in the flux density
vs. uvdistance domain. Note that the phase of the data is not assessed.

In further detail, the workflow is as follows: a snapshot of the flagging
state is preserved at the start, a preliminary phase and amplitude gaincal
solution is solved and applied, the flagging heuristics are run and
any outliers are marked for flagging, the flagging state is restored from the
snapshot. If any outliers were found, then these are flagged. Plots are
generated at two points in this workflow: after preliminary phase and
amplitude calibration but before flagging heuristics are run, and after
flagging heuristics have been run and applied. If no points were flagged,
the 'after' plots are not generated or displayed. The score for this stage
is the standard data flagging score, which depends on the fraction of data
flagged.


Output

results -- If pipeline mode is 'getinputs' then None is returned. Otherwise
            the results object for the pipeline task is returned.
</description>

<input>
    <param name="vis" subparam="true" type="stringVec">
        <shortdescription>List of input MeasurementSets</shortdescription>
        <description>The list of input MeasurementSets. Defaults to the list of
            MeasurementSets specified in the pipeline context.

            example: vis=['M51.ms']
        </description>
        <value/>
    </param>

    <param name="intent" subparam="true" type="string">
        <shortdescription>Set of data selection intents</shortdescription>
        <description>A string containing a comma delimited list of intents against
            which the selected fields are matched. If undefined (default), it
            will select all data with the AMPLITUDE, PHASE, and CHECK intents,
            except for one case: if one of the AMPLITUDE intent fields was also
            used for BANDPASS, then this task will select only data with PHASE
            and CHECK intents.

            example: intent='*PHASE*'
        </description>
        <value/>
    </param>

    <param name="phaseupsolint" subparam="true" type="any">
        <shortdescription>Phaseup correction solution interval</shortdescription>
        <description>The phase correction solution interval in CASA syntax.

            example: phaseupsolint='300s'
        </description>
        <any type="variant"/>
        <value type="string">int</value>
    </param>

    <param name="solint" subparam="true" type="any">
        <shortdescription>Solution intervals</shortdescription>
        <description>Time and channel solution intervals in CASA syntax.

            example: solint='inf,10ch', solint='inf'
        </description>
        <any type="variant"/>
        <value type="string">inf</value>
    </param>

    <param name="minsnr" subparam="true" type="double">
        <shortdescription>Reject solutions below this SNR</shortdescription>
        <description>Solutions below this SNR are rejected.</description>
        <value>2.0</value>
    </param>

    <param name="refant" subparam="true" type="string">
        <shortdescription>Reference antenna names</shortdescription>
        <description>Reference antenna names. Defaults to the value(s) stored in the
            pipeline context. If undefined in the pipeline context defaults to
            the CASA reference antenna naming scheme.

            example: refant='DV01', refant='DV06,DV07'
        </description>
        <value/>
    </param>

    <param name="antnegsig" subparam="true" type="double">
        <shortdescription>Lower sigma threshold for identifying outliers as a result of bad antennas within individual timestamps</shortdescription>
        <description>Lower sigma threshold for identifying outliers as a result of bad
            antennas within individual timestamps.
        </description>
        <value>4.0</value>
    </param>

    <param name="antpossig" subparam="true" type="double">
        <shortdescription>Upper sigma threshold for identifying outliers as a result of bad antennas within individual timestamps</shortdescription>
        <description>Upper sigma threshold for identifying outliers as a result of bad
            antennas within individual timestamps.
        </description>
        <value>4.6</value>
    </param>

    <param name="tmantint" subparam="true" type="double">
        <shortdescription>Threshold for maximum fraction of timestamps that are allowed to contain outliers</shortdescription>
        <description>Threshold for maximum fraction of timestamps that are allowed to
            contain outliers.
        </description>
        <value>0.063</value>
    </param>

    <param name="tmint" subparam="true" type="double">
        <shortdescription>Initial threshold for maximum fraction of &quot;outlier timestamps&quot; over &quot;total timestamps&quot; that a baseline may be a part of</shortdescription>
        <description> Initial threshold for maximum fraction of &quot;outlier timestamps&quot; over
            &quot;total timestamps&quot; that a baseline may be a part of.
        </description>
        <value>0.085</value>
    </param>

    <param name="tmbl" subparam="true" type="double">
        <shortdescription>Initial threshold for maximum fraction of &quot;bad baselines&quot; over &quot;all baselines&quot; that an antenna may be a part of</shortdescription>
        <description>Initial threshold for maximum fraction of &quot;bad baselines&quot; over &quot;all
            baselines&quot; that an antenna may be a part of.
        </description>
        <value>0.175</value>
    </param>

    <param name="antblnegsig" subparam="true" type="double">
        <shortdescription>Lower sigma threshold for identifying outliers as a result of &quot;bad baselines&quot; and/or &quot;bad antennas&quot; within baselines (across all timestamps)</shortdescription>
        <description>Lower sigma threshold for identifying outliers as a result of
            &quot;bad baselines&quot; and/or &quot;bad antennas&quot; within baselines, across all
            timestamps.
        </description>
        <value>3.4</value>
    </param>

    <param name="antblpossig" subparam="true" type="double">
        <shortdescription>Upper sigma threshold for identifying outliers as a result of &quot;bad baselines&quot; and/or &quot;bad antennas&quot; within baselines (across all timestamps)</shortdescription>
        <description> Upper sigma threshold for identifying outliers as a result of
            &quot;bad baselines&quot; and/or &quot;bad antennas&quot; within baselines, across all
            timestamps.
        </description>
        <value>3.2</value>
    </param>

    <param name="relaxed_factor" subparam="true" type="double">
        <shortdescription>Relaxed value to set the threshold scaling factor to under certain conditions (see task description)</shortdescription>
        <description>Relaxed value to set the threshold scaling factor to under
            certain conditions (see task description).
        </description>
        <value>2.0</value>
    </param>

    <param name="niter" subparam="true" type="int">
        <shortdescription>Maximum number of times to iterate on evaluation of flagging heuristics.</shortdescription>
        <description>Maximum number of times to iterate on evaluation of flagging
            heuristics. If an iteration results in no new flags, then subsequent
            iterations are skipped.
        </description>
        <value>2</value>
    </param>

    <param name="pipelinemode" type="string">
        <shortdescription>The pipeline operations mode</shortdescription>
        <description> The pipeline operating mode. In 'automatic' mode the pipeline
            determines the values of all context defined pipeline inputs automatically.
            In interactive mode the user can set the pipeline context defined
            parameters manually. In 'getinputs' mode the user can check the settings of
            all pipeline parameters without running the task.

            default: 'automatic'.
        </description>
        <value>automatic</value>
        <allowed kind="enum">
            <value>automatic</value>
            <value>interactive</value>
            <value>getinputs</value>
        </allowed>
    </param>

    <param name="dryrun" subparam="true" type="bool">
        <shortdescription>Run the task (False) or list commands (True)</shortdescription>
        <description>Run the commands (True) or generate the commands to be run but
            do not execute (False).
        </description>
       <value>False</value>
    </param>

    <param name="acceptresults" subparam="true" type="bool">
        <shortdescription>Automatically apply results to context</shortdescription>
        <description>Add the results of the task to the pipeline context (True) or
            reject them (False).
        </description>
        <value>True</value>
    </param>

    <constraints>
        <when param="pipelinemode">
            <equals type="string" value="automatic"/>
            <equals type="string" value="interactive">
                <default param="vis"><value type="stringVec"/></default>
                <default param="intent"><value type="string"/></default>
                <default param="phaseupsolint"><value type="string">int</value></default>
                <default param="solint"><value type="string">inf</value></default>
                <default param="minsnr"><value>2.0</value></default>
                <default param="refant"><value type="string"/></default>
                <default param="antnegsig"><value type="double">4.0</value></default>
                <default param="antpossig"><value type="double">4.6</value></default>
                <default param="tmantint"><value type="double">0.063</value></default>
                <default param="tmint"><value type="double">0.085</value></default>
                <default param="tmbl"><value type="double">0.175</value></default>
                <default param="antblnegsig"><value type="double">3.4</value></default>
                <default param="antblpossig"><value type="double">3.2</value></default>
                <default param="relaxed_factor"><value type="double">2.0</value></default>
                <default param="niter"><value type="int">2</value></default>
                <default param="dryrun"><value type="bool">False</value></default>
                <default param="acceptresults"><value type="bool">True</value></default>
            </equals>
            <equals type="string" value="getinputs">
                <default param="vis"><value type="stringVec"/></default>
            </equals>
        </when>
    </constraints>
</input>


<example>
1. run with recommended settings to create flux scale calibration with flagging
using recommended thresholds:

    hifa_gfluxscaleflag()
</example>
<returns>any</returns></task>
</casaxml>
