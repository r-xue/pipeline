<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd">

<task category="pipeline" name="hifa_flagdata" type="function">

<shortdescription>Do meta data based flagging of a list of MeasurementSets.</shortdescription>
<description>
The hifa_flagdata data performs basic flagging operations on a list of
measurements including:

o applying online flags
o applying a flagging template
o partial polarization flagging
o autocorrelation data flagging
o shadowed antenna data flagging
o scan-based flagging by intent or scan number
o edge channel flagging, as needed
o low atmospheric transmission flagging

About the spectral window edge channel flagging:

o For TDM spectral windows, a number of edge channels are always flagged,
  according to the fracspw and fracspwfps parameters (the latter operates only
  on spectral windows with 62, 124, or 248 channels). With the default setting
  of fracspw, the number of channels flagged on each edge is 2, 4, or 8 for 64,
  128, or 256-channel spectral windows, respectively.

o For most FDM spectral windows, no edge flagging is done. The only exceptions
  are ACA spectral windows that encroach too close to the baseband edge.
  Channels that lie closer to the baseband edge than the following values are
  flagged: 62.5, 40, 20, 10, and 5 MHz for spectral windows with bandwidths of
  1000, 500, 250, 125, and 62.5 MHz, respectively. A warning is generated in
  the weblog if flagging occurs due to proximity to the baseband edge.
  By definition, 2000 MHz spectral windows always encroach the baseband edge on
  both sides of the spectral window, and thus are always flagged on both sides
  in order to achieve 1875 MHz bandwidth (in effect, they are flagged by
  62.5 MHz on each side), and thus no warning is generated.

Output

results -- If pipeline mode is 'getinputs' then None is returned. Otherwise
    the results object for the pipeline task is returned.
</description>

<input>
    <param name="vis" subparam="true" type="stringVec">
        <shortdescription>List of input MeasurementSets to flag</shortdescription>
        <description>The list of input MeasurementSets. Defaults to the list of
            MeasurementSets defined in the pipeline context.
        </description>
        <value/>
    </param>

    <param name="autocorr" type="bool">
        <shortdescription>Flag autocorrelation data</shortdescription>
        <description>Flag autocorrelation data.</description>
        <value type="bool">True</value>
    </param>

    <param name="shadow" type="bool">
        <shortdescription>Flag shadowed antennas</shortdescription>
        <description>Flag shadowed antennas.</description>
        <value type="bool">True</value>
    </param>

    <param name="tolerance" subparam="true" type="double">
        <shortdescription>Amount of antenna shadowing tolerated</shortdescription>
        <description>Amount of antenna shadowing tolerated, in meters. A positive number
            allows antennas to overlap in projection. A negative number forces antennas
            apart in projection. Zero implies a distance of radius_1+radius_2 between
            antenna centers.
        </description>
        <value>0.0</value>
    </param>

    <param name="scan" type="bool">
        <shortdescription>Flag specified scans</shortdescription>
        <description>Flag a list of specified scans.</description>
        <value>True</value>
    </param>

    <param name="scannumber" subparam="true" type="string">
        <shortdescription>List of scans to be flagged</shortdescription>
        <description>A string containing a comma delimited list of scans to be
            flagged.

            example: scannumber='3,5,6'
        </description>
        <value/>
    </param>

    <param name="intents" subparam="true" type="string">
        <shortdescription>List of intents of scans to be flagged</shortdescription>
        <description>A string containing a comma delimited list of intents against
            which the scans to be flagged are matched.

            example: intents='*BANDPASS*'
        </description>
        <value>POINTING,FOCUS,ATMOSPHERE,SIDEBAND</value>
    </param>

    <param name="edgespw" type="bool">
        <shortdescription>Flag edge channels</shortdescription>
        <description>Flag the edge spectral window channels.</description>
        <value type="bool">True</value>
    </param>

    <param name="fracspw" subparam="true" type="double">
        <shortdescription>Fraction of channels to flag at edges of TDM spectral windows</shortdescription>
        <description>Fraction of channels to flag at both edges of TDM spectral windows.</description>
        <value>0.03125</value>
    </param>

    <param name="fracspwfps" subparam="true" type="double">
        <shortdescription>Fraction of channels to flag at edges of ACA FPS TDM spectral windows</shortdescription>
        <description>Fraction of channels to flag at both edges of ACA TDM
            spectral windows that were created with the earlier (original)
            implementation of the frequency profile synthesis (FPS) algorithm.</description>
        <value>0.048387</value>
    </param>

    <param name="online" type="bool">
        <shortdescription>Apply the online flags</shortdescription>
        <description>Apply the online flags.</description>
        <value type="bool">True</value>
    </param>

    <param name="partialpol" type="bool">
        <shortdescription>Flag partial polarization products</shortdescription>
        <description>Identify integrations in multi-polarisation data where part
            of the polarization products are already flagged, and flag the other
            polarization products in those integrations.
        </description>
        <value type="bool">True</value>
    </param>

    <param name="lowtrans" type="bool">
        <shortdescription>Flag low atmospheric transmission</shortdescription>
        <description>Flag spectral windows for which a significant fraction of the
        channels have atmospheric transmission below the threshold (mintransrepspw,
        mintransnonrepspws).</description>
        <value type="bool">True</value>
    </param>

    <param name="mintransnonrepspws" subparam="true" type="double">
        <shortdescription>Atmospheric transmission threshold for non-representative spectral windows</shortdescription>
        <description>This atmospheric transmissivity threshold is used to flag
            a non-representative science spectral window when more than 60% of
            its channels have a transmissivity below this level.</description>
        <value>0.1</value>
    </param>

    <param name="mintransrepspw" subparam="true" type="double">
        <shortdescription>Atmospheric transmissivity threshold for representative spectral window</shortdescription>
        <description>This atmospheric transmissivity threshold is used to flag the
            representative science spectral window when more than 60% of its channels
            have a transmissivity below this level.</description>
        <value>0.05</value>
    </param>

    <param name="fileonline" subparam="true" type="string">
        <shortdescription>File of online flags to be applied</shortdescription>
        <description>File containing the online flags. These are computed by the
            h_init or hif_importdata data tasks. If the online flags files
            are undefined a name of the form 'msname.flagonline.txt' is assumed.
        </description>
        <value/>
    </param>

    <param name="template" type="bool">
        <shortdescription>Apply a flagging template</shortdescription>
        <description>Apply flagging templates</description>
        <value>True</value>
    </param>

    <param name="filetemplate" subparam="true" type="stringVec">
        <shortdescription>File that contains the flagging template</shortdescription>
        <description>The name of a text file that contains the flagging template
            for RFI, birdies, telluric lines, etc. If the template flags files
            is undefined a name of the form 'msname.flagtemplate.txt' is assumed.
        </description>
        <value/>
    </param>

    <param name="hm_tbuff" type="string">
        <shortdescription>The time buffer computation heuristic</shortdescription>
        <description>The heuristic for computing the default time interval padding
            parameter. The options are 'halfint' and 'manual'. In 'halfint' mode tbuff
            is set to half the maximum of the median integration time of the science
            and calibrator target observations. The value of 0.048 seconds is
            subtracted from the lower time limit to accommodate the behavior of the
            ALMA Control system.
        </description>
        <value>halfint</value>
        <allowed kind="enum">
            <value>halfint</value>
            <value>manual</value>
        </allowed>
    </param>

        <param name="tbuff" subparam="true" type="any">
            <shortdescription>List of time buffers (sec) to pad timerange in flag commands</shortdescription>
        <description>The time in seconds used to pad flagging command time intervals if
            hm_tbuff='manual'. The default in manual mode is no flagging.
        </description>
            <type>double</type><type>doubleVec</type>
            <value type="doubleVec">[0.0,0.0]</value>
        </param>

        <param name="qa0" type="bool">
        <shortdescription>QA0 flags</shortdescription>
        <description>QA0 flags.</description>
        <value>True</value>
    </param>

        <param name="qa2" type="bool">
        <shortdescription>QA2 flags</shortdescription>
        <description>QA2 flags.</description>
        <value>True</value>
    </param>

    <param name="pipelinemode" type="string">
        <shortdescription>The pipeline operating mode</shortdescription>
        <description>The pipeline operating mode. In 'automatic' mode the pipeline
            determines the values of all context defined pipeline inputs automatically.
            In interactive mode the user can set the pipeline context defined parameters
            manually. In 'getinputs' mode the user can check the settings of all
            pipeline parameters without running the task.
        </description>
        <value>automatic</value>
        <allowed kind="enum">
            <value>automatic</value>
            <value>interactive</value>
            <value>getinputs</value>
        </allowed>
    </param>

    <param name="flagbackup" subparam="true" type="bool">
        <shortdescription>Backup pre-existing flags before applying new ones</shortdescription>
        <description>Back up any pre-existing flags.</description>
        <value type="bool">True</value>
    </param>

    <param name="dryrun" subparam="true" type="bool">
        <shortdescription>Run the task (False) or display the command (True)</shortdescription>
        <description>Run the commands (True) or generate the commands to be run but do not
            execute (False).
        </description>
        <value>False</value>
    </param>

    <param name="acceptresults" subparam="true" type="bool">
        <shortdescription>Add the results into the pipeline context</shortdescription>
        <description>Add the results of the task to the pipeline context (True) or
            reject them (False).
        </description>
        <value>True</value>
    </param>

    <constraints>
        <when param="pipelinemode">
            <equals type="string" value="automatic">
            </equals>
            <equals type="string" value="interactive">
                <default param="vis"><value type="stringVec"/></default>
                <default param="flagbackup"><value type="bool">True</value></default>
                <default param="dryrun"><value type="bool">False</value></default>
                <default param="acceptresults"><value type="bool">True</value></default>
            </equals>
            <equals type="string" value="getinputs">
                <default param="vis"><value type="stringVec"/></default>
                <default param="flagbackup"><value type="bool">True</value></default>
            </equals>
        </when>

        <when param="shadow">
            <equals type="bool" value="True">
                 <default param="tolerance"><value type="double"/></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>

        <when param="scan">
            <equals type="bool" value="True">
                <default param="scannumber"><value type="string"/></default>
                <default param="intents"><value type="string">POINTING,FOCUS,ATMOSPHERE,SIDEBAND</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>

        <when param="edgespw">
            <equals type="bool" value="True">
                <default param="fracspw"><value type="double">0.03125</value></default>
                <default param="fracspwfps"><value type="double">0.048387</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>

        <when param="online">
            <equals type="bool" value="True">
                <default param="fileonline"><value type="string"/></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>

        <when param="template">
            <equals type="bool" value="True">
                <default param="filetemplate"><value type="stringVec"/></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>

        <when param="hm_tbuff">
            <equals type="string" value="halfint">
            </equals>
            <equals type="string" value="manual">
                <default param="tbuff"><value type="doubleVec">[0.0,0.0]</value></default>
            </equals>
        </when>

    </constraints>
</input>


<returns>any</returns>

<example>
1. Do basic flagging on a MeasurementSet:

    hifa_flagdata()

2. Do basic flagging on a MeasurementSet flagging additional scans selected
   by number as well:

    hifa_flagdata(scannumber='13,18')
</example>
</task>
</casaxml>
