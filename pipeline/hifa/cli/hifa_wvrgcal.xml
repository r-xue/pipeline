<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd file:///opt/casa/code/xmlcasa/xml/casa.xsd">

<task category="pipeline" name="hifa_wvrgcal" type="function">

<shortdescription>
Generate a gain table based on Water Vapor Radiometer data, and calculate
a QA score based on its effect on the interferometric data.
</shortdescription>

<description>
Generate a gain table based on the Water Vapor Radiometer data in each vis
file. By applying the wvr calibration to the data specified by 'qa_intent' and
'qa_spw', calculate a QA score to indicate its effect on interferometric data;
a score &gt; 1 implies that the phase noise is improved, a score &lt; 1 implies
that it is made worse. If the score is less than 'accept_threshold' then the 
wvr gain table is not accepted into the context for subsequent use.
</description>
    
<input>
    <param name="vis" subparam="true" type="stringVec">
        <shortdescription>List of input visibility files</shortdescription>
        <description>List of input visibility files.

    default: none, in which case the vis files to be used will be read
             from the context. 
    example: vis=['ngc5921.ms']
        </description>
        <value/>
    </param>
      
    <param name="caltable" subparam="true" type="stringVec">
        <shortdescription>List of output gain calibration tables</shortdescription>
        <description>List of output gain calibration tables.

    default: none, in which case the names of the caltables will be
             generated automatically.
    example: caltable='ngc5921.wvr'
        </description>
	<value/>
    </param>

    <param name="offsetstable" subparam="true" type="stringVec">
        <shortdescription>List of input temperature offsets table files</shortdescription>
        <description>List of input temperature offsets table files to subtract from
    WVR measurements before calculating phase corrections.

    default: none, in which case no offsets are applied.
    example: offsetstable=['ngc5921.cloud_offsets']
        </description>
        <value/>
    </param>

    <param name="hm_toffset" type="string">
        <shortdescription>Toffset computation heuristic method</shortdescription>
        <description>If 'manual', set the 'toffset' parameter to the user-specified value.
    If 'automatic', set the 'toffset' parameter according to the
    date of the MeasurementSet; toffset=-1 if before 2013-01-21T00:00:00
    toffset=0 otherwise.
        </description>
        <value>automatic</value>
        <allowed kind="enum">
            <value>manual</value>
            <value>automatic</value>
        </allowed>
    </param>

    <param name="toffset" subparam="true" type="double">
        <shortdescription>Time offset (sec) between IF and WVR data</shortdescription>
        <description>Time offset (sec) between interferometric and WVR data.</description>
	<value>0</value>
    </param>
      
    <param name="segsource" type="bool">
        <shortdescription>Compute new coefficient calculation for each source</shortdescription>
        <description>If True calculate new atmospheric phase correction coefficients
    for each source, subject to the constraints of the 'tie' parameter.
    'segsource' is forced to be True if the 'tie' parameter is set to a
    non-empty value by the user or by the automatic heuristic.
        </description>
	<value>True</value>
    </param>
      
    <param name="sourceflag" subparam="true" type="stringVec">
	<shortdescription>Flag the WVR data for these source(s)</shortdescription>
    <description>Flag the WVR data for these source(s) as bad and do not produce
    corrections for it. Requires segsource=True.

    example: ['3C273']
    </description>
	<value/>
   </param>

   <param name="hm_tie" subparam="true" type="string">
     <shortdescription>Tie computation heuristics method</shortdescription>
     <description>If 'manual', set the 'tie' parameter to the user-specified value.
    If 'automatic', set the 'tie' parameter to include with the
    target all calibrators that are within 15 degrees of it:
    if no calibrators are that close then 'tie' is left empty.
     </description>
     <value>automatic</value>
       <allowed kind="enum">
         <value>manual</value>
         <value>automatic</value>
       </allowed>
   </param>

    <param name="tie" subparam="true" type="stringVec">
        <shortdescription>Sources for which to use the same atmospheric phase correction coefficients</shortdescription>
        <description>Use the same atmospheric phase correction coefficients when 
    calculating the wvr correction for all sources in the 'tie'. If 'tie'
    is not empty then 'segsource' is forced to be True. Ignored unless
    hm_tie='manual'.

    example: ['3C273,NGC253', 'IC433,3C279']
        </description>
        <value/>
    </param>
      
    <param name="nsol" subparam="true" type="int">
        <shortdescription>Number of solutions for phase correction coefficients</shortdescription>
        <description>Number of solutions for phase correction coefficients during this
    observation, evenly distributed in time throughout the observation. It
    is used only if segsource=False because if segsource=True then the
    coefficients are recomputed whenever the telescope moves to a new source
    (within the limits imposed by 'tie').
        </description>
	<value>1</value>
    </param>
            
    <param name="disperse" type="bool">
	<shortdescription>Apply correction for dispersion (Deprecated; will be removed)</shortdescription>
    <description>Apply correction for dispersion. (Deprecated; will be removed)</description>
	<value>False</value>
    </param>
            
    <param name="wvrflag" subparam="true" type="stringVec">
	<shortdescription>Flag the WVR data for these antenna(s) replace with interpolated values</shortdescription>
    <description>Flag the WVR data for the listed antennas as bad and replace 
    their data with values interpolated from the 3 nearest antennas with
    unflagged data.

    example: ['DV03','DA05','PM02']
    </description>
	<value/>
    </param>

    <param name="hm_smooth" type="string">
        <shortdescription>Smoothing computation heuristics method</shortdescription>
        <description>If 'manual' set the 'smooth' parameter to the user-specified value.
    If 'automatic', run the wvrgcal task with the range of 'smooth' parameters
    required to match the integration time of the wvr data to that of the
    interferometric data in each spectral window.
        </description>
        <value>automatic</value>
        <allowed kind="enum">
            <value>manual</value>
            <value>automatic</value>
        </allowed>
    </param>
      
    <param name="smooth" subparam="true" type="string">
	<shortdescription>Smooth WVR data on the given timescale before calculating the correction</shortdescription>
    <description>Smooth WVR data on this timescale before calculating the correction.
    Ignored unless hm_smooth='manual'.
    </description>
	<value/>
    </param>
      
    <param name="scale" subparam="true" type="double">
	<shortdescription>Scale the entire phase correction by this factor</shortdescription>
    <description>Scale the entire phase correction by this factor.</description>
	<value>1.</value>
    </param>

    <param name="maxdistm" type="double">
      <shortdescription>Maximum distance (m) of an antenna used for interpolation for a flagged antenna.</shortdescription>
      <description>Maximum distance in meters of an antenna used for interpolation
    from a flagged antenna.

    default: -1  (automatically set to 100m if &gt;50% of antennas are 7m
        antennas without WVR and otherwise set to 500m)
    example: maxdistm=550
      </description>
      <value>-1</value>
    </param>

    <param name="minnumants" type="int">
      <shortdescription>Minimum number of near antennas (up to 3) required for interpolation</shortdescription>
      <description>Minimum number of nearby antennas (up to 3) used for
    interpolation from a flagged antenna.

    example: minnumants=3
      </description>
      <value>2</value>
      <allowed kind="enum">
          <value>1</value>
          <value>2</value>
          <value>3</value>
      </allowed>
    </param>

    <param name="mingoodfrac" type="double">
      <shortdescription>Minimum fraction of good data per antenna</shortdescription>
      <description>Minimum fraction of good data per antenna.</description>
      <value>0.8</value>
    </param>

    <param name="refant" subparam="true" type="string">
      <shortdescription>Ranked list of reference antennas</shortdescription>
      <description>Ranked comma delimited list of reference antennas.

    example: refant='DV01,DV02'
      </description>
      <value/>
    </param>

    <param name="qa_intent" type="string">
        <shortdescription>Data intents to use in estimating the effectiveness of the wvr correction</shortdescription>
        <description>The list of data intents on which the wvr correction is to be 
    tried as a means of estimating its effectiveness.

    A QA 'view' will be calculated for each specified intent, in each spectral
    window in each vis file.

    Each QA 'view' will consist of a pair of 2-d images with dimensions
    ['ANTENNA', 'TIME'], one showing the data phase-noise before the 
    wvr application, the second showing the phase noise after (both 'before'
    and 'after' images have a bandpass calibration applied as well).

    An overall QA score is calculated for each vis file, by dividing the
    'before' images by the 'after' and taking the median of the result. An
    overall score of 1 would correspond to no change in the phase noise,
    a score &gt; 1 implies an improvement.

    If the overall score for a vis file is less than the value in          
    'accept_threshold' then the wvr calibration file is not made available 
    for merging into the context for use in the subsequent reduction.

    If you do not want any QA calculations then set qa_intent=''.

    example: qa_intent='PHASE'
        </description>
        <value/>
    </param>

    <param name="qa_bandpass_intent" type="string">
        <shortdescription>Data intent to use for the bandpass calibration in the qa calculation</shortdescription>
        <description>The data intent to use for the bandpass calibration in
    the qa calculation. The default is blank to allow the underlying bandpass
    task to select a sensible intent if the dataset lacks BANDPASS data.
        </description>
        <value/>
    </param>

    <param name="qa_spw" type="string">
        <shortdescription>Data SpW(s) to use in estimating the effectiveness of the wvr correction</shortdescription>
        <description>The SpW(s) to use for the qa calculation, in the order that they
    should be tried. Input as a comma-separated list. The default is blank, in
    which case the task will try SpWs in order of decreasing median sky
    opacity.
        </description>
        <value/>
    </param>

    <param name="accept_threshold" type="double">
        <shortdescription>Improvement ratio (phase-rms without wvr / phase-rms with wvr) above which wvrg calibration file will be accepted</shortdescription>
        <description>The phase-rms improvement ratio
    (rms without wvr / rms with wvr) above which the wrvg file will be
    accepted into the context for subsequent application.
        </description>
        <value>1.0</value>
    </param>

    <param name="pipelinemode" type="string">
        <shortdescription>The pipeline operating mode</shortdescription>
        <value>automatic</value>
        <allowed kind="enum">
            <value>automatic</value>
            <value>interactive</value>
            <value>getinputs</value>
        </allowed>
    </param>

    <param name="dryrun" subparam="true" type="bool">
        <shortdescription>Run the task (False) or display the command(True)</shortdescription>
        <value>False</value>
    </param>

    <param name="acceptresults" subparam="true" type="bool">
       <shortdescription>Add the results to the pipeline context</shortdescription>
       <value>True</value>
    </param>

    <constraints>

        <when param="pipelinemode">
            <equals type="string" value="automatic"/>
            <equals type="string" value="interactive">
                <default param="vis"><value type="stringVec"/></default>
                <default param="caltable"><value type="stringVec"/></default>
                <default param="offsetstable"><value type="stringVec"/></default>
                <default param="wvrflag"><value type="stringVec"/></default>
                <default param="scale"><value type="double">1.0</value></default>
                <default param="refant"><value type="string"/></default>
                <default param="dryrun"><value type="bool">False</value></default>
                <default param="acceptresults"><value type="bool">True</value></default>
            </equals>
            <equals type="string" value="getinputs">
                <default param="vis"><value type="stringVec"/></default>
                <default param="caltable"><value type="stringVec"/></default>
                <default param="offsetstable"><value type="stringVec"/></default>
                <default param="wvrflag"><value type="stringVec"/></default>
                <default param="scale"><value type="double">1.0</value></default>
                <default param="refant"><value type="string"/></default>
            </equals>
        </when>

        <when param="hm_smooth">

	    <equals type="string" value="automatic">
	    </equals>
	    <equals type="string" value="manual">
	        <default param="smooth"><value type="string"/></default>
	    </equals>
        </when>

        <when param="hm_tie">
            <equals type="string" value="automatic">
            </equals>
            <equals type="string" value="manual">
                <default param="sourceflag"><value type="stringVec"/></default>
                <default param="tie"><value type="stringVec"/></default>
                <default param="segsource"><value type="bool">False</value></default>
                <default param="nsol"><value type="int">1</value></default>
            </equals>
        </when>

        <when param="hm_toffset">
	    <equals type="string" value="automatic">
	    </equals>
	    <equals type="string" value="manual">
	        <default param="toffset"><value type="double">0</value></default>
	    </equals>
        </when>

    </constraints>

</input>


<returns>any</returns>

<example>
Example

1. Compute the WVR calibration for all the MeasurementSets:

    hifa_wvrgcal(hm_tie='automatic')
</example>
</task>
</casaxml>
