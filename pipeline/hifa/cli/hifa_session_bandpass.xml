<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd file:///opt/casa/code/xmlcasa/xml/casa.xsd">

<task category="pipeline" name="hifa_session_bandpass" type="function">

<shortdescription>Compute bandpass calibration solutions (Experimental)</shortdescription>
<description>
(Experimental)

Compute amplitude and phase as a function of frequency for each spectral
window in each MeasurementSet.

Previous calibration can be applied on the fly.

hifa_session_bandpass computes a bandpass solution for every specified science
spectral window. By default a 'phaseup' pre-calibration is performed
and applied on the fly to the data, before the bandpass is computed.

The hif_refant task may be used to precompute a prioritized list of
reference antennas.


Output

results -- If pipeline mode is 'getinputs' then None is returned. Otherwise
    the results object for the pipeline task is returned.


Issues

The specified minsnr parameter is currently applied to the bandpass
solution computation but not the 'phaseup' computation. Some noisy
solutions in the phaseup may not be properly rejected.
</description>

<input>

    <param name="vis" subparam="true" type="stringVec">
        <shortdescription>List of input MeasurementSets</shortdescription>
        <description>The list of input MeasurementSets. Defaults to the list of
            MeasurementSets specified in the pipeline context.

            example: vis=['M51.ms']
        </description>
        <value/>
    </param>

    <param name="caltable" subparam="true" type="stringVec">
        <shortdescription>List of output caltables</shortdescription>
        <description>The list of output calibration tables. Defaults to the standard
            pipeline naming convention.

            example: caltable=['M51.bcal']
        </description>
        <value/>
    </param>

    <param name="field" subparam="true" type="string">
        <shortdescription>Set of data selection field names or ids</shortdescription>
        <description>The list of field names or field ids for which bandpasses are
            computed. Defaults to all fields.

            example: field='3C279', field='3C279, M82'
        </description>
        <value/>
    </param>

    <param name="intent" subparam="true" type="string">
        <shortdescription>Set of data selection intents</shortdescription>
        <description>A string containing a comma delimited list of intents against
            which the selected fields are matched. Defaults to all data
            with bandpass intent.

            example: intent='*PHASE*'
        </description>
        <value/>
    </param>

    <param name="spw" subparam="true" type="string">
        <shortdescription>Set of data selection spectral window/channels</shortdescription>
        <description>The list of spectral windows and channels for which bandpasses are
            computed. Defaults to all science spectral windows.

            example: spw='11,13,15,17'
        </description>
        <value/>
    </param>

    <param name="antenna" subparam="true" type="string">
        <shortdescription>Set of data selection antenna IDs</shortdescription>
        <description>
        </description>
        <value/>
    </param>

    <param name="hm_phaseup" type="string">
        <shortdescription>Phaseup before computing the bandpass</shortdescription>
        <description>The pre-bandpass solution phaseup gain heuristics. The options
            are 'snr' (compute solution required to achieve the specified SNR),
            'manual' (use manual solution parameters), and '' (none).

            example: hm_phaseup='manual'
        </description>
        <value>snr</value>
        <allowed kind="enum">
            <value>snr</value>
            <value>manual</value>
            <value/>
        </allowed>
    </param>

    <param name="phaseupsolint" subparam="true" type="any">
        <shortdescription>Phaseup correction solution interval</shortdescription>
        <description>The phase correction solution interval in CASA syntax.
            Used when hm_phaseup='manual' or as a default if the hm_phaseup='snr'
            heuristic computation fails.

            example: phaseupsolint='300s'
        </description>
        <any type="variant"/>
        <value type="string">int</value>
    </param>

    <param name="phaseupbw" subparam="true" type="string">
        <shortdescription>Bandwidth to use for phaseup</shortdescription>
        <description>Bandwidth to be used for phaseup. Defaults to 500MHz.
            Used when hm_phaseup='manual'.

            example: phaseupbw='' to use entire bandpass, phaseupbw='500MHz' to use
                                     central 500MHz
        </description>
        <value/>
    </param>

    <param name="phaseupsnr" subparam="true" type="double">
        <shortdescription>SNR for phaseup solution</shortdescription>
        <description>The required SNR for the phaseup solution. Used only if
            hm_phaseup='snr'.

            example: phaseupsnr=10.0
        </description>
        <value>20.0</value>
    </param>

    <param name="phaseupnsols" subparam="true" type="int">
        <shortdescription>Minimum number of phaseup gain solutions</shortdescription>
        <description>The minimum number of phaseup gain solutions. Used only if
            hm_phaseup='snr'.

            example: phaseupnsols=4
        </description>
        <value>2</value>
    </param>

    <param name="hm_bandpass" type="string">
        <shortdescription>Bandpass solution heuristics</shortdescription>
        <description>The bandpass solution heuristics. The options are 'snr'
            (compute the solution required to achieve the specified SNR),
            'smoothed' (simple smoothing heuristics), and 'fixed' (use
            the user defined parameters for all spws).
        </description>
        <value>snr</value>
        <allowed kind="enum">
            <value>snr</value>
            <value>smoothed</value>
            <value>fixed</value>
        </allowed>
    </param>

    <param name="solint" subparam="true" type="any">
        <shortdescription>Solution intervals</shortdescription>
        <description>Time and channel solution intervals in CASA syntax.
            default: 'inf' Used for hm_bandpass='fixed', and as a default
            for the 'snr' and 'smoothed' options.

            default: 'inf,7.8125MHz'
            example: solint='inf,10ch', solint='inf'
        </description>
        <any type="variant"/>
        <value type="string">inf</value>
    </param>

    <param name="maxchannels" subparam="true" type="int">
        <shortdescription>The smoothing factor in channels</shortdescription>
        <description>The bandpass solution smoothing factor in channels. The
            solution interval is bandwidth / 240. Set to 0 for no smoothing.
            Used if hm_bandpass='smoothed&quot;.

            example: 0
        </description>
        <value>240</value>
    </param>

    <param name="evenbpints" subparam="true" type="bool">
        <shortdescription>Force frequency solint to even bandpass intervals</shortdescription>
        <description>Force the per spw frequency solint to be evenly divisible
            into the spw bandpass if hm_bandpass='snr'.

            example: evenbpints=False
        </description>
        <value>True</value>
    </param>

    <param name="bpsnr" subparam="true" type="double">
        <shortdescription>SNR for bandpass solution</shortdescription>
        <description>The required SNR for the bandpass solution. Used only if
            hm_bandpass='snr'

            example: bpsnr=30.0
        </description>
        <value>50.0</value>
    </param>

    <param name="minbpsnr" subparam="true" type="double">
        <shortdescription>The minimum required bandpass frequency solution signal to noise when strong atmospheric lines exist in Tsys spectra</shortdescription>
        <description>The minimum required SNR for the bandpass solution
            when strong atmospheric lines exist in Tsys spectra.
            Used only if hm_bandpass='snr'.

            example: minbpsnr=10.0
        </description>
       <value>20.0</value>
    </param>

    <param name="bpnsols" subparam="true" type="int">
        <shortdescription>Minimum number of bandpass solutions</shortdescription>
        <description>The minimum number of bandpass solutions. Used only if
            hm_bandpass='snr'.
        </description>
        <value>8</value>
    </param>

    <param name="hm_bandtype" type="string">
        <shortdescription>Bandpass solution type</shortdescription>
        <description>The type of bandpass. The options are 'channel' and
            'polynomial' for CASA bandpass types = 'B' and 'BPOLY' respectively.
        </description>
        <value>channel</value>
        <allowed kind="enum">
            <value>channel</value>
            <value>polynomial</value>
        </allowed>
    </param>

    <param name="combine" type="string">
        <shortdescription>Data axes which to combine for solve (scan, spw, and/or field)</shortdescription>
        <description>Data axes to combine for solving. Axes are '', 'scan', 'spw',
            'field' or any comma-separated combination.

            example: combine='scan,field'
        </description>
        <value>scan</value>
    </param>

    <param name="refant" subparam="true" type="string">
        <shortdescription>Reference antenna names</shortdescription>
        <description>Reference antenna names. Defaults to the value(s) stored in the
            pipeline context. If undefined in the pipeline context defaults to
            the CASA reference antenna naming scheme.

            example: refant='DV01', refant='DV06,DV07'
        </description>
        <value/>
    </param>

    <param name="solnorm" type="bool">
        <shortdescription>Normalise the bandpass solution</shortdescription>
        <description>Normalise the bandpass solutions.</description>
        <value type="bool">True</value>
    </param>

    <param name="minblperant" subparam="true" type="int">
        <shortdescription>Minimum baselines per antenna required for solve</shortdescription>
        <description>Minimum number of baselines required per antenna for each solve
            Antennas with fewer baselines are excluded from solutions. Used for
            hm_bandtype='channel' only.
        </description>
        <value>4</value>
    </param>

    <param name="minsnr" subparam="true" type="double">
        <shortdescription>Reject solutions below this SNR</shortdescription>
        <description>Solutions below this SNR are rejected. Used for hm_bandtype=
            'channel' only.
        </description>
        <value>3.0</value>
    </param>

    <param name="degamp" subparam="true" type="variant">
        <shortdescription>Degree for polynomial amplitude solution</shortdescription>
        <description>
        </description>
        <value type="string"/>
    </param>

    <param name="degphase" subparam="true" type="variant">
        <shortdescription>Degree for polynomial phase solution</shortdescription>
        <description>
        </description>
        <value type="string"/>
    </param>

    <param name="pipelinemode" type="string">
        <shortdescription>The pipeline operating mode</shortdescription>
        <description>The pipeline operating mode. In 'automatic' mode the pipeline
            determines the values of all context defined pipeline inputs automatically.
            In interactive mode the user can set the pipeline context defined
            parameters manually. In 'getinputs' mode the user can check the settings of
            all pipeline parameters without running the task.
        </description>
        <value>automatic</value>
        <allowed kind="enum">
            <value>automatic</value>
            <value>interactive</value>
            <value>getinputs</value>
        </allowed>
    </param>

    <param name="dryrun" subparam="true" type="bool">
        <shortdescription>Run the task (False) or display the command(True)</shortdescription>
        <description>Run the commands (True) or generate the commands to be run but
            do not execute (False).
        </description>
        <value>False</value>
    </param>

    <param name="acceptresults" subparam="true" type="bool">
        <shortdescription>Add the results to the pipeline context</shortdescription>
        <description>Add the results of the task to the pipeline context (True) or
            reject them (False).
        </description>
        <value>True</value>
    </param>

    <param name="parallel" subparam="true" type="string">
        <shortdescription>Execute using CASA HPC functionality, if available.</shortdescription>
        <description>Execute using CASA HPC functionality, if available.</description>
        <value>automatic</value>
        <allowed kind="enum">
            <value>automatic</value>
            <value>true</value>
            <value>false</value>
        </allowed>
    </param>

    <constraints>

        <when param="hm_phaseup">
            <equals type="string" value="snr">
                <default param="phaseupsolint">
                    <value type="string">int</value>
                </default>
                <default param="phaseupsnr">
                    <value type="double">20.0</value>
                </default>
                <default param="phaseupnsols">
                    <value type="int">2</value>
                </default>
            </equals>
            <equals type="string" value="manual">
                <default param="phaseupsolint">
                    <value type="string">int</value>
                </default>
                <default param="phaseupbw">
                    <value type="string"/>
                </default>
            </equals>
            <equals type="string" value="">
            </equals>
        </when>

        <when param="hm_bandpass">
            <equals type="string" value="snr">
                <default param="solint">
                    <value type="string">inf</value>
                </default>
                <default param="evenbpints">
                    <value type="bool">True</value>
                </default>
                <default param="bpsnr">
                    <value type="double">50.0</value>
                </default>
                <default param="minbpsnr">
                    <value type="double">20.0</value>
                </default>
                <default param="bpnsols">
                    <value type="int">8</value>
                </default>
            </equals>
            <equals type="string" value="smoothed">
                <default param="solint">
                    <value type="string">inf</value>
                </default>
                <default param="maxchannels">
                    <value type="int">240</value>
                </default>
            </equals>
            <equals type="string" value="fixed">
                <default param="solint">
                    <value type="string">inf,7.8125MHz</value>
                </default>
            </equals>
        </when>

        <when param="hm_bandtype">
            <equals type="string" value="channel">
                <default param="minblperant">
                    <value type="int">4</value>
                </default>
                <default param="minsnr">
                    <value type="double">3.0</value>
                </default>
            </equals>
            <equals type="string" value="polynomial">
                <default param="degamp">
                    <value type="string"/>
                </default>
                <default param="degphase">
                    <value type="string"/>
                </default>
            </equals>
        </when>

        <when param="pipelinemode">
            <equals type="string" value="automatic"/>
            <equals type="string" value="interactive">
                <default param="vis">
                    <value type="stringVec"/>
                </default>
                <default param="caltable">
                    <value type="stringVec"/>
                </default>
                <default param="field">
                    <value type="string"/>
                </default>
                <default param="intent">
                    <value type="string"/>
                </default>
                <default param="spw">
                    <value type="string"/>
                </default>
                <default param="antenna">
                    <value type="string"/>
                </default>
                <default param="refant">
                    <value type="string"/>
                </default>
                <default param="solnorm">
                    <value type="bool">True</value>
                </default>
                <default param="dryrun">
                    <value type="bool">False</value>
                </default>
                <default param="acceptresults">
                    <value type="bool">True</value>
                </default>
                <default param="parallel">
                    <value type="string">automatic</value>
                </default>
            </equals>
            <equals type="string" value="getinputs">
                <default param="vis">
                    <value type="stringVec"/>
                </default>
                <default param="caltable">
                    <value type="stringVec"/>
                </default>
                <default param="field">
                    <value type="string"/>
                </default>
                <default param="intent">
                    <value type="string"/>
                </default>
                <default param="spw">
                    <value type="string"/>
                </default>
                <default param="antenna">
                    <value type="string"/>
                </default>
                <default param="refant">
                    <value type="string"/>
                </default>
                <default param="solnorm">
                    <value type="bool">True</value>
                </default>
            </equals>
        </when>
    </constraints>

</input>


<returns>any</returns>


<example>
1. Compute a channel bandpass for all visibility files in the pipeline
context using the CASA reference antenna determination scheme:

hifa_session_bandpass()

2. Same as the above but precompute a prioritized reference antenna list:

hif_refant()
hifa_session_bandpass()
</example>
</task>
</casaxml>
