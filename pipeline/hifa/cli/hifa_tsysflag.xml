<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd file:///opt/casa/code/xmlcasa/xml/casa.xsd">

<task category="pipeline" name="hifa_tsysflag" type="function">

<shortdescription>Flag deviant system temperatures for ALMA interferometry measurements. This
    is done by running a sequence of flagging subtasks, each looking for a
    different type of possible error.
</shortdescription>

<description>
    Flag deviant system temperatures for ALMA interferometry measurements.

    Flag all deviant system temperature measurements in the system temperature
    calibration table by running a sequence of flagging tests, each designed
    to look for a different type of error.

    If a file with manual Tsys flags is provided with the 'filetemplate'
    parameter, then these flags are applied prior to the evaluation of the
    flagging heuristics listed below.

    The tests are:

    1. Flag Tsys spectra with high median values

    2. Flag Tsys spectra with high median derivatives. This is meant to spot
    spectra that are 'ringing'.

    3. Flag the edge channels of the Tsys spectra in each SpW.

    4. Flag Tsys spectra whose shape is different from that associated with
    the BANDPASS intent.

    5. Flag 'birdies'.

    6. Flag the Tsys spectra of all antennas in a timestamp and spw if
    proportion of antennas already flagged in this timestamp and spw exceeds
    a threshold, and flag Tsys spectra for all antennas and all timestamps
    in a spw, if proportion of antennas that are already entirely flagged
    in all timestamps exceeds a threshold.

    Output

    results -- If pipeline mode is 'getinputs' then None is returned. Otherwise
        the results object for the pipeline task is returned.
</description>

<input>
    <param name="vis" subparam="true" type="stringVec">
        <shortdescription>List of input MeasurementSets (Not used) </shortdescription>
        <description>List of input MeasurementSets (Not used).</description>
        <value/>
    </param>

    <param name="caltable" subparam="true" type="stringVec">
        <shortdescription>List of input caltables</shortdescription>
        <description>List of input Tsys calibration tables.

            default: [] - Use the table currently stored in the pipeline context.
            example: caltable=['X132.ms.tsys.s2.tbl']
        </description>
        <value/>
    </param>

    <param name="flag_nmedian" type="bool">
        <shortdescription>True to flag Tsys spectra with high median value</shortdescription>
        <description>True to flag Tsys spectra with high median value.</description>
        <value>True</value>
    </param>

    <param name="fnm_limit" subparam="true" type="double">
        <shortdescription>Flag spectra with median greater than fnm_limit * median over all spectra</shortdescription>
        <description>Flag spectra with median value higher than fnm_limit * median
            of this measure over all spectra.
        </description>
        <value>2.0</value>
    </param>

    <param name="fnm_byfield" subparam="true" type="bool">
        <shortdescription>Evaluate the nmedian metric separately for each field.</shortdescription>
        <description>Evaluate the nmedian metric separately for each field.</description>
        <value>True</value>
    </param>

    <param name="flag_derivative" type="bool">
        <shortdescription>True to flag Tsys spectra with high median derivative</shortdescription>
        <description>True to flag Tsys spectra with high median derivative.</description>
        <value>True</value>
    </param>

    <param name="fd_max_limit" subparam="true" type="double">
        <shortdescription>Flag spectra with median derivative higher than fd_max_limit * median of this measure over all spectra</shortdescription>
        <description>Flag spectra with median derivative higher than
            fd_max_limit * median of this measure over all spectra.</description>
        <value>13.0</value>
    </param>

    <param name="flag_edgechans" type="bool">
        <shortdescription>True to flag edges of Tsys spectra</shortdescription>
        <description>True to flag edges of Tsys spectra.</description>
        <value>True</value>
    </param>

    <param name="fe_edge_limit" subparam="true" type="double">
        <shortdescription>Flag channels whose channel to channel difference greater than fe_edge_limit * median across spectrum</shortdescription>
        <description>Flag channels whose channel to channel difference &gt;
            fe_edge_limit * median across spectrum.
        </description>
        <value>3.0</value>
    </param>

    <param name="flag_fieldshape" type="bool">
        <shortdescription>True to flag Tsys spectra with a radically different shape to those of the ff_refintent</shortdescription>
        <description>True to flag Tsys spectra with a radically different
            shape to those of the ff_refintent.
        </description>
        <value>True</value>
    </param>

    <param name="ff_refintent" subparam="true" type="string">
        <shortdescription>Data intent providing the reference shape for \'flag_fieldshape\'</shortdescription>
        <description>Data intent that provides the reference shape for
            'flag_fieldshape'.
        </description>
        <value>BANDPASS</value>
    </param>

    <param name="ff_max_limit" subparam="true" type="double">
        <shortdescription>Flag Tsys spectra with \'fieldshape\' metric greater than ff_max_limit</shortdescription>
        <description>Flag Tsys spectra with 'fieldshape' metric values &gt;
            ff_max_limit.</description>
        <value>13</value>
    </param>

    <param name="flag_birdies" type="bool">
        <shortdescription>True to flag channels covering sharp spectral features</shortdescription>
        <description>True to flag channels covering sharp spectral features.</description>
        <value>True</value>
    </param>

    <param name="fb_sharps_limit" subparam="true" type="double">
        <shortdescription>Flag channels bracketing a channel to channel difference greater than fb_sharps_limit</shortdescription>
        <description>Flag channels bracketing a channel to channel
            difference &gt; fb_sharps_limit.
        </description>
        <value>0.05</value>
    </param>

    <param name="flag_toomany" type="bool">
        <shortdescription>True to flag Tsys spectra for which a proportion of timestamps or proportion of antennas that are entirely flagged exceeds their respective thresholds.</shortdescription>
        <description>True to flag Tsys spectra for which a proportion of
            antennas for given timestamp and/or proportion of antennas that are
            entirely flagged in all timestamps exceeds their respective thresholds.
        </description>
        <value>True</value>
    </param>

    <param name="tmf1_limit" subparam="true" type="double">
        <shortdescription>Flag all Tsys spectra within a timestamp for an antenna if proportion flagged already exceeds tmf1_limit</shortdescription>
        <description>Flag Tsys spectra for all antennas in a timestamp and spw if
            proportion of antennas already flagged in this timestamp and spw exceeds
            tmf1_limit.
        </description>
        <value>0.666</value>
    </param>

    <param name="tmef1_limit" subparam="true" type="double">
        <shortdescription>Flag all Tsys spectra for all antennas in a spw, if proportion of antennas that are already entirely flagged in all timestamps exceeds tmef1_limit</shortdescription>
        <description>Flag Tsys spectra for all antennas and all timestamps
            in a spw, if proportion of antennas that are already entirely flagged
            in all timestamps exceeds tmef1_limit.
        </description>
        <value>0.666</value>
    </param>

    <param name="metric_order" type="string">
        <shortdescription>Order in which to evaluate the flagging metric(s); inactive metrics are skipped.</shortdescription>
        <description>Order in which to evaluate the flagging metrics that are
            enables. Disabled metrics are skipped.
        </description>
        <value>nmedian,derivative,edgechans,fieldshape,birdies,toomany</value>
    </param>

    <param name="normalize_tsys" type="bool">
        <shortdescription>Normalize Tsys prior to computing the flagging metric(s)</shortdescription>
        <description>True to create a normalized Tsys table that is used to
            evaluate the Tsys flagging metrics. All newly found flags are also applied
            to the original Tsys caltable that continues to be used for subsequent
            calibration.
        </description>
        <value>False</value>
    </param>

	<param name="filetemplate" type="stringVec">
	    <shortdescription>File containing manual Tsys flags to apply.</shortdescription>
      <description>The name of a text file that contains the manual Tsys flagging
          template. If the template flags file is undefined, a name of the form
          'msname.flagtsystemplate.txt' is assumed.
      </description>
	    <value/>
	</param>

    <param name="pipelinemode" type="string">
        <shortdescription>The pipeline operations mode</shortdescription>
        <description>The pipeline operating mode. In 'automatic' mode the pipeline
            determines the values of all context defined pipeline inputs automatically.
            In interactive mode the user can set the pipeline context defined
            parameters manually. In 'getinputs' mode the user can check the settings
            of all pipeline parameters without running the task.
        </description>
        <value>automatic</value>
        <allowed kind="enum">
            <value>automatic</value>
            <value>interactive</value>
            <value>getinputs</value>
        </allowed>
    </param>

    <param name="dryrun" subparam="true" type="bool">
        <shortdescription>Run the task (False) or list commands (True)</shortdescription>
        <description>Run the commands (True) or generate the commands to be run but
            do not execute (False).
        </description>
        <value>False</value>
    </param>

    <param name="acceptresults" subparam="true" type="bool">
        <shortdescription>Automatically apply results to context</shortdescription>
        <description>Add the results of the task to the pipeline context (True) or
            reject them (False).
        </description>
        <value>True</value>
    </param>

    <constraints>
        <when param="pipelinemode">
            <equals type="string" value="automatic"/>
            <equals type="string" value="interactive">
                <default param="caltable"><value type="stringVec"/></default>
                <default param="dryrun"><value type="bool">False</value></default>
                <default param="acceptresults"><value type="bool">True</value></default>
            </equals>
            <equals type="string" value="getinputs">
                <default param="caltable"><value type="stringVec"/></default>
            </equals>
        </when>

        <when param="flag_nmedian">
            <equals type="bool" value="True">
                <default param="fnm_limit"><value>2.0</value></default>
                <default param="fnm_byfield"><value>True</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>

        <when param="flag_derivative">
            <equals type="bool" value="True">
                <default param="fd_max_limit"><value>13.0</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>

        <when param="flag_edgechans">
            <equals type="bool" value="True">
                <default param="fe_edge_limit"><value>3.0</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>

        <when param="flag_fieldshape">
            <equals type="bool" value="True">
                <default param="ff_refintent"><value type="string">BANDPASS</value></default>
                <default param="ff_max_limit"><value>13</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>

        <when param="flag_birdies">
            <equals type="bool" value="True">
                <default param="fb_sharps_limit"><value>0.05</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>

        <when param="flag_toomany">
            <equals type="bool" value="True">
                <default param="tmf1_limit"><value>0.666</value></default>
                <default param="tmef1_limit"><value>0.666</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>

    </constraints>
</input>



<example>
1. Flag Tsys measurements using currently recommended tests:

    hifa_tsysflag()

2. Flag Tsys measurements using all recommended tests apart from that
using the 'fieldshape' metric:

    hifa_tsysflag(flag_fieldshape=False)
</example>
<returns>any</returns></task>
</casaxml>
