<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd file:///opt/casa/code/xmlcasa/xml/casa.xsd">

<task category="pipeline" name="hifa_targetflag" type="function">
<shortdescription>Flag target source outliers</shortdescription>
<description>
This task flags very obvious target source outliers. The calibration tables and
flags accumulated in the cal library up to this point are pre-applied, then
hif_correctedampflag is called for just the TARGET intent. Any resulting
flags are applied and the calibration library is restored to the state before
calling this task.

Because science targets are generally not point sources, the flagging algorithm
needs to be more clever than for point source calibrators. The algorithm identifies
outliers by examining statistics within successive overlapping radial uv bins,
allowing it to adapt to an arbitrary uv structure. Outliers must appear to be a
potential outlier in two bins in order to be declared an outlier.  To further avoid
overflagging of good data, only the highest threshold levels are used (+12/-13 sigma).
This stage does can add significant processing time, particularly in making the plots.
So to save time, the amp vs. time plots are created only if flags are generated, and
the amp vs. uv distance plots are made for only those spws that generated flags.
Also, to avoid confusion in mosaics and single field surveys, the amp vs. uv distance
plots only show field IDs with new flags.
</description>
<input>
    <param name="vis" subparam="true" type="stringVec">
        <shortdescription>List of input MeasurementSets</shortdescription>
        <description>The list of input MeasurementSets. Defaults to the list of
                     MeasurementSets specified in the h_init or hif_importdata task.
                     '': use all MeasurementSets in the context

                     Examples: 'ngc5921.ms', ['ngc5921a.ms', ngc5921b.ms', 'ngc5921c.ms']
        </description>
        <value/>
    </param>

    <param name="pipelinemode" type="string">
        <shortdescription>The pipeline operating mode</shortdescription>
        <description>The pipeline operating mode.
                     In 'automatic' mode the pipeline determines the values of all
                     context defined pipeline inputs automatically.
                     In 'interactive' mode the user can set the pipeline context
                     defined parameters manually.
                     In 'getinputs' mode the user can check the settings of all
                     pipeline parameters without running the task.
        </description>
        <value>automatic</value>
        <allowed kind="enum">
            <value>automatic</value>
            <value>interactive</value>
            <value>getinputs</value>
        </allowed>
    </param>

    <param name="dryrun" subparam="true" type="bool">
        <shortdescription>Run the task (False) or display task command (True)</shortdescription>
        <description>Run the task (False) or display task command (True)</description>
        <value>False</value>
    </param>

    <param name="acceptresults" subparam="true" type="bool">
        <shortdescription>Add the results into the pipeline context</shortdescription>
        <description>Add the results of the task to the pipeline context (True) or
                     reject them (False).
        </description>
        <value>True</value>
    </param>

    <constraints>
        <when param="pipelinemode">
            <equals type="string" value="automatic">
            </equals>
            <equals type="string" value="interactive">
                <default param="vis"><value type="stringVec"/></default>

                <default param="dryrun"><value type="bool">False</value></default>
                <default param="acceptresults"><value type="bool">True</value></default>
            </equals>
            <equals type="string" value="getinputs">
                <default param="vis"><value type="stringVec"/></default>

            </equals>
        </when>
    </constraints>

</input>

<returns>any</returns>


<example>
</example>
</task>
</casaxml>
