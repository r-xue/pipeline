<casaxml xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd file:///opt/casa/code/xmlcasa/xml/casa.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://casa.nrao.edu/schema/psetTypes.html">

<task category="pipeline" name="hifa_bandpass" type="function">

<shortdescription>Compute bandpass calibration solutions</shortdescription>

<description>
The hifa_bandpass task computes a bandpass solution for every specified science
spectral window. By default a 'phaseup' pre-calibration is performed
and applied on the fly to the data, before the bandpass is computed.

The hif_refant task may be used to pre-compute a prioritized list of
reference antennas.

If pipeline mode is 'getinputs' then None is returned. Otherwise
the results object for the pipeline task is returned.

Issues:
There is currently some discussion about whether or not to do an 'ampup'
operations at the same time as the 'phaseup'. This is not required for the
bandpass computation but the amplitude information may provide a useful quality
assessment measure.

The specified minsnr parameter is currently applied to the bandpass
solution computation but not the 'phaseup' computation. Some noisy
solutions in the phaseup may not be properly rejected.
</description>

<input>
    <param subparam="true" name="vis" type="stringVec">
        <shortdescription>List of input MeasurementSets</shortdescription>
        <description>List of input MeasurementSets. Defaults to the list of
            MeasurementSets specified in the pipeline context.

            Example: vis=['ngc5921.ms']
        </description>
        <value/>
    </param>

    <param subparam="true" name="caltable" type="stringVec">
        <shortdescription>List of output caltable(s)</shortdescription>
        <description>List of names for the output calibration tables. Defaults
            to the standard pipeline naming convention.

            Example: caltable=['ngc5921.gcal']
        </description>
        <value/>
    </param>

    <param subparam="true" name="field" type="string">
        <shortdescription>List of field names or ids to use in data selection</shortdescription>
        <description>The list of field names or field ids for which bandpasses are
            computed. Set to field='' by default, which means the task will select all
            fields.

            Example: field='3C279', field='3C279,M82'
        </description>
        <value/>
    </param>

    <param subparam="true" name="intent" type="string">
        <shortdescription>List of intents to use in data selection</shortdescription>
        <description>A string containing a comma delimited list of intents against
            which the selected fields are matched. Set to intent='' by default, which
            means the task will select all data with the BANDPASS intent.

            Example: intent='*PHASE*'
        </description>
        <value/>
    </param>

    <param subparam="true" name="spw" type="string">
        <shortdescription>List of spectral windows to use in data selection</shortdescription>
        <description>The list of spectral windows and channels for which bandpasses are
            computed. Set to spw='' by default, which means the task will select all
            science spectral windows.

            Example: spw='11,13,15,17'
        </description>
        <value/>
    </param>

    <param subparam="true" name="antenna" type="string">
        <description>Set of data selection antenna IDs</description>
        <value/>
    </param>

    <param name="hm_phaseup" type="string">
        <shortdescription>Phaseup before computing the bandpass</shortdescription>
        <description>The pre-bandpass solution phaseup gain heuristics. The options are:
            'snr': compute solution required to achieve the specified SNR
            'manual': use manual solution parameters
            '': skip phaseup

            Example: hm_phaseup='manual'
        </description>
        <value>snr</value>
        <allowed kind="enum">
            <value>snr</value>
            <value>manual</value>
            <value/>
        </allowed>
    </param>

    <param subparam="true" name="phaseupsolint" type="any">
        <shortdescription>Phaseup correction solution interval</shortdescription>
        <description>The phase correction solution interval in CASA syntax.
            Used when hm_phaseup='manual' or as a default if the hm_phaseup='snr'
            heuristic computation fails.

            Example: phaseupsolint='300s'
        </description>
        <any type="variant"/>
        <value type="string">int</value>
    </param>

    <param subparam="true" name="phaseupbw" type="string">
        <shortdescription>Bandwidth to use for phaseup</shortdescription>
        <description>Bandwidth to be used for phaseup. Used when hm_phaseup='manual'.

            Example: phaseupbw='' to use entire bandpass
                     phaseupbw='500MHz' to use central 500MHz
        </description>
        <value/>
    </param>

    <param subparam="true" name="phaseupsnr" type="double">
        <shortdescription>SNR for phaseup solution</shortdescription>
        <description>The required SNR for the phaseup solution. Used only if
            hm_phaseup='snr'.

            Example: phaseupsnr=10.0
        </description>
        <value>20.0</value>
    </param>

    <param subparam="true" name="phaseupnsols" type="int">
        <shortdescription>Minimum number of phaseup gain solutions</shortdescription>
        <description>The minimum number of phaseup gain solutions. Used only if
            hm_phaseup='snr'.

            Example: phaseupnsols=4
        </description>
        <value>2</value>
    </param>

    <param name="hm_bandpass" type="string">
        <shortdescription>Bandpass solution heuristics</shortdescription>
        <description>The bandpass solution heuristics. The options are:
              'snr': compute the solution required to achieve the specified SNR
              'smoothed': simple smoothing heuristics
              'fixed': use the user defined parameters for all spws
        </description>
        <value>snr</value>
        <allowed kind="enum">
            <value>snr</value>
            <value>smoothed</value>
            <value>fixed</value>
        </allowed>
    </param>

    <param subparam="true" name="solint" type="any">
        <shortdescription>Solution intervals</shortdescription>
        <description>Time and channel solution intervals in CASA syntax.

            Default is solint='inf', which is used when hm_bandpass='fixed'.
            If hm_bandpass is set to 'snr', then the task will attempt to compute and use
            an optimal SNR-based solint (and warn if this solint is not good enough).
            If hm_bandpass is set to 'smoothed', the task will use a smoothed solint.
        </description>
        <any type="variant"/>
        <value type="string">inf</value>
    </param>

    <param subparam="true" name="maxchannels" type="int">
        <shortdescription>The smoothing factor in channels</shortdescription>
        <description>The bandpass solution smoothing factor in channels. The
            solution interval is bandwidth / 240. Set to 0 for no smoothing.
            Used if hm_bandpass='smoothed'.

            Example: maxchannels=0
        </description>
        <value>240</value>
    </param>

    <param subparam="true" name="evenbpints" type="bool">
        <shortdescription>Force frequency solint to even bandpass intervals</shortdescription>
        <description>Force the per spw frequency solint to be evenly divisible
            into the spw bandpass if hm_bandpass='snr'.

            Example: evenbpints=False
        </description>
        <value>True</value>
    </param>

    <param subparam="true" name="bpsnr" type="double">
        <shortdescription>SNR for bandpass solution</shortdescription>
        <description>The required SNR for the bandpass solution. Used only if
            hm_bandpass='snr'.

            Example: bpsnr=30.0
        </description>
        <value>50.0</value>
    </param>

   <param subparam="true" name="minbpsnr" type="double">
       <shortdescription>Minimum SNR for bandpass frequency solution when strong atmospheric lines exist in Tsys spectra</shortdescription>
	   <description>The minimum required SNR for the bandpass solution
           when strong atmospheric lines exist in Tsys spectra.
           Used only if hm_bandpass='snr'.

           Example: minbpsnr=10.0
       </description>
       <value>20.0</value>
   </param>

    <param subparam="true" name="bpnsols" type="int">
        <shortdescription>Minimum number of bandpass solutions</shortdescription>
        <description>The minimum number of bandpass solutions. Used only if
            hm_bandpass='snr'.
        </description>
        <value>8</value>
    </param>

    <param subparam="true" name="combine" type="string">
        <shortdescription>Data axes which to combine for solve (scan, spw, and/or field)</shortdescription>
        <description>Data axes to combine for solving. Axes are '', 'scan', 'spw',
            'field' or any comma-separated combination.

            Example: combine='scan,field'
        </description>
        <value>scan</value>
    </param>

    <param subparam="true" name="refant" type="string">
        <shortdescription>List of reference antenna names</shortdescription>
        <description>List of reference antenna names. Defaults to the value(s) stored in the
            pipeline context. If undefined in the pipeline context defaults to
            the CASA reference antenna naming scheme.

            Example: refant='DV06,DV07'
        </description>
        <value/>
    </param>

    <param subparam="true" name="solnorm" type="bool">
        <description>Normalise the bandpass solution</description>
        <value type="bool">True</value>
    </param>

    <param subparam="true" name="minblperant" type="int">
        <shortdescription>Minimum baselines per antenna required for solve</shortdescription>
        <description>Minimum number of baselines required per antenna for each solve.
            Antennas with fewer baselines are excluded from solutions.
        </description>
        <value>4</value>
    </param>

    <param subparam="true" name="minsnr" type="double">
        <description>Solutions below this SNR are rejected</description>
        <value>3.0</value>
    </param>

    <param name="pipelinemode" type="string">
        <shortdescription>The pipeline operation mode</shortdescription>
        <description>The pipeline operating mode. In 'automatic' mode the pipeline
            determines the values of all context defined pipeline inputs automatically.
            In interactive mode the user can set the pipeline context defined parameters
            manually. In 'getinputs' mode the user can check the settings of
            all pipeline parameters without running the task.
        </description>
        <value>automatic</value>
        <allowed kind="enum">
            <value>automatic</value>
            <value>interactive</value>
            <value>getinputs</value>
        </allowed>
    </param>

    <param subparam="true" name="dryrun" type="bool">
        <shortdescription>Run the task (False) or list commands (True)</shortdescription>
        <description>Run the commands (True) or generate the commands to be run but
            do not execute (False).
        </description>
        <value>False</value>
    </param>

    <param subparam="true" name="acceptresults" type="bool">
        <shortdescription>Automatically accept results into context</shortdescription>
        <description>Automatically accept the results of the task into the pipeline context (True)
            or reject them (False).
        </description>
        <value>True</value>
    </param>

    <constraints>
        <when param="hm_phaseup">
            <equals value="snr" type="string">
                <default param="phaseupsolint"><value type="string">int</value></default>
                <default param="phaseupsnr"><value type="double">20.0</value></default>
                <default param="phaseupnsols"><value type="int">2</value></default>
            </equals>
            <equals value="manual" type="string">
                <default param="phaseupsolint"><value type="string">int</value></default>
                <default param="phaseupbw"><value type="string"/></default>
            </equals>
            <equals value="" type="string">
            </equals>
        </when>

        <when param="hm_bandpass">
            <equals value="snr" type="string">
                <default param="solint"><value type="string">inf</value></default>
                <default param="evenbpints"><value type="bool">True</value></default>
                <default param="bpsnr"><value type="double">50.0</value></default>
                <default param="minbpsnr"><value type="double">20.0</value></default>
                <default param="bpnsols"><value type="int">8</value></default>
            </equals>
            <equals value="smoothed" type="string">
                <default param="solint"><value type="string">inf</value></default>
                <default param="maxchannels"><value type="int">240</value></default>
            </equals>
            <equals value="fixed" type="string">
                <default param="solint"><value type="string">inf,7.8125MHz</value></default>
            </equals>
        </when>

        <when param="pipelinemode">
            <equals value="automatic" type="string"/>
            <equals value="interactive" type="string">
                <default param="vis"><value type="stringVec"/></default>
                <default param="caltable"><value type="stringVec"/></default>
                <default param="field"><value type="string"/></default>
                <default param="intent"><value type="string"/></default>
                <default param="spw"><value type="string"/></default>
                <default param="antenna"><value type="string"/></default>
                <default param="combine"><value type="string">scan</value></default>
                <default param="refant"><value type="string"/></default>
                <default param="solnorm"><value type="bool">True</value></default>
                <default param="minblperant"><value type="int">4</value></default>
                <default param="minsnr"><value type="double">3.0</value></default>
                <default param="dryrun"><value type="bool">False</value></default>
                <default param="acceptresults"><value type="bool">True</value></default>
            </equals>
            <equals value="getinputs" type="string">
                <default param="vis"><value type="stringVec"/></default>
                <default param="caltable"><value type="stringVec"/></default>
                <default param="field"><value type="string"/></default>
                <default param="intent"><value type="string"/></default>
                <default param="spw"><value type="string"/></default>
                <default param="antenna"><value type="string"/></default>
                <default param="combine"><value type="string">scan</value></default>
                <default param="refant"><value type="string"/></default>
                <default param="solnorm"><value type="bool">True</value></default>
                <default param="minblperant"><value type="int">4</value></default>
                <default param="minsnr"><value type="double">3.0</value></default>
            </equals>
        </when>
    </constraints>
</input>

<returns>any</returns>

<example>
1. Compute a channel bandpass for all visibility files in the pipeline
context using the CASA reference antenna determination scheme:

    hifa_bandpass()

2. Same as the above but precompute a prioritized reference antenna list:

    hif_refant()
    hifa_bandpass()
</example>
</task>
</casaxml>
