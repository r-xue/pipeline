'''
The qa2adapter module holds classes that regroup the results list, ordered by
stage number, into a structure ordered by task type. This regrouping is used
by the QA2 sections of the weblog.
'''
import collections

import pipeline.hif.tasks.bandpass as bandpass
import pipeline.hif.tasks.gaincal as gaincal


class QA2Section(object):    
    """
    QA2Section is the base class for a QA2 weblog section. It should not be 
    instantiated directly.    
    """
    # text shown in weblog describing this QA2 summary section 
    description = 'Generic QA2 Section'
    
    # filename pointing to the more detailed T2-3-X sections for this QA2
    # grouping
    url = ''

    # a dictionary holding the mapping of results class to description. This
    # should be overridden by the subclass
    result_descriptions = {}

    def __init__(self, results):
        """
        Construct a new QA2Section, allocating Results to the appropriate task
        type based on the mapping help in result_descriptions.
    
        :param results: the results
        :type results: a list of :class:`~pipeline.infrastructure.api.Result`
        """
        # Within each QA2 section, results must be gathered together by type,
        # eg. all bandpass tasks under a 'Bandpass' heading). This is 
        # accomplished with the results_by_type dictionary, keyed by results
        # class and with the matching results objects as values, eg.
        # results_by_type[BandpassResults] = [bpresult1, bpresult2]
        self.results_by_type = collections.defaultdict(list)

        # the keys of the results_descriptions dictionary holds the results
        # classes we should include in this section
        results_classes = self.result_descriptions.keys()
         
        # collect each results node matching a recognised class for this
        # section, adding it to the list held as the dictionary value
        in_section = [r for r in results if r.__class__ in results_classes]
        for result in in_section:
            self.results_by_type[result.__class__].append(result)
            
        
class CalibrationQA2Section(QA2Section):
    """
    CalibrationQA2Section collects together those results generated by
    calibration tasks.
    """
    
    description = 'Calibration'
    url = 't2-3-1m.html'
    
    result_descriptions = {bandpass.common.BandpassResults : 'Bandpass',
                           gaincal.common.GaincalResults   : 'Gain'     }
    
    def __init__(self, results):
        super(CalibrationQA2Section, self).__init__(results)

        
class LineFindingQA2Section(QA2Section):
    """
    LineFindingQA2Section collects together those results generated by
    line-finding tasks.
    """
    description = 'Line finding'
    url = 't2-3-2m.html'
    
    def __init__(self, results):
        super(LineFindingQA2Section, self).__init__(results)


class FlaggingQA2Section(QA2Section):
    """
    FlaggingQA2Section collects together those results generated by flagging
    tasks.
    """
    description = 'Flagging'
    url = 't2-3-3m.html'

    def __init__(self, results):
        super(FlaggingQA2Section, self).__init__(results)


class ImagingQA2Section(QA2Section):
    """
    ImagingQA2Section collects together those results generated by imaging
    tasks.
    """
    description = 'Imaging'
    url = 't2-3-4m.html'
    
    def __init__(self, results):
        super(ImagingQA2Section, self).__init__(results)

        
class ResultsToQA2Adapter(object):
    """
    ResultsToQA2Adapter is a wrapper providing a QA2 perspective of a results
    list. It converts the results list, ordered by stage number, into a set of
    sections (QA2Sections) grouped by QA2 type.
    """
    
    # holds the QA2Sections into which we should push the results 
    section_classes = [CalibrationQA2Section,
                       LineFindingQA2Section,
                       FlaggingQA2Section,
                       ImagingQA2Section     ]
    
    def __init__(self, results):
        """
        Construct a new ResultsToQA2Adapter, allocating Results to the
        appropriate QA2 sections.  
    
        :param results: the results
        :type results: a list of :class:`~pipeline.infrastructure.api.Result`
        """
        self.sections = collections.defaultdict(list)

        for cls in self.section_classes:
            self.sections[cls] = cls(results)


def get_url(result):
    """
    Get the URL of the QA2 section appropriate to the given result.

    :param result: the task result
    :type result: :class:`~pipeline.infrastructure.api.Result`
    :rtype: the filename of the appropriate QA2 section
    """
    result_cls = result.__class__

    for section_cls in ResultsToQA2Adapter.section_classes:
        if result_cls in section_cls.result_descriptions.keys():
            return section_cls.url
    return None
