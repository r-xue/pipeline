<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" ?>
<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd file:///opt/casa/code/xmlcasa/xml/casa.xsd">

<task type="function" name="hsd_reduce" category="pipeline">
<shortdescription>The end-to-end reduction task of single-dish pipeline</shortdescription>

<description>
The hsd_reduce task executes whole reduction process necessary for the single-dish pipeline.
</description>
<input>
    <param type="int" name="iteration">
        <description>Number of iteration</description>
        <value>2</value>
    </param>

    <param type="bool" name="continuum">
        <description>Process continuum component</description>
        <value>False</value>
    </param>

    <param type="bool" name="docontsub">
        <description>Do continuum subtraction using edge of the map</description>
        <value>False</value>
    </param>

    <param type="intArray" name="edge">
        <description>Number of channels to be excluded from line detection</description>
        <value>0,0</value>
    </param>

    <param type="doubleArray" name="linewindow">
        <description>Predefined spectral line window ([] activates line detection)</description>
        <value></value>
    </param>

    <param type="bool" name="broadline">
        <description>Try to detect broad spectral line</description>
        <value>False</value>
    </param>

    <param type="int" name="fitorder">
        <description>Maximum fit order for baseline subtraction (-1 stands for automatic determination)</description>
        <value>-1</value>
    </param>

    <param type="string" name="fitfunc">
        <description>Fitting function</description>
        <value>cspline</value>
        <allowed kind="enum">
            <value>spline</value>
            <value>polynomial</value>
            <value>cspline</value>
            <value>poly</value>
        </allowed>
    </param>

    <param type="bool" name="flag_tsys" >
        <description>True to flag data by Tsys</description>
        <value>True</value>
    </param>
        
    <param type="double" name="tsys_thresh" subparam="true">
        <description>Threshold for Tsys flag</description>
        <value>3.0</value>
    </param>
        
    <param type="bool" name="flag_weath">
        <description>True to flag data by weather (not implemented yet)</description>
        <value>False</value>
    </param>

    <param type="double" name="weath_thresh" subparam="true">
        <description>Threshold for weather flag</description>
        <value>3.0</value>
    </param>

    <param type="bool" name="flag_prfre" >
        <description>True to flag data by expected rms of pre-fit spectra</description>
        <value>True</value>
    </param>

    <param type="double" name="prfre_thresh" subparam="true">
        <description>Threshold for expected rms of pre-fit spetra flag</description>
        <value>3.0</value>
    </param>

    <param type="bool" name="flag_pofre" >
        <description>True to flag data by expected rms of post-fit spectra</description>
        <value>True</value>
    </param>

    <param type="double" name="pofre_thresh"  subparam="true">
        <description>Threshold for expected rms of post-fit spectra flag</description>
        <value>1.3333</value>
    </param>

    <param type="bool" name="flag_prfr" >
        <description>True to flag data by rms of pre-fit spectra</description>
        <value>True</value>
    </param>

    <param type="double" name="prfr_thresh"  subparam="true">
        <description>Threshold for rms of pre-fit flag</description>
        <value>4.5</value>
    </param>

    <param type="bool" name="flag_pofr" >
        <description>True to flag data by rms of post-fit spectra</description>
        <value>True</value>
    </param>

    <param type="double" name="pofr_thresh" subparam="true">
        <description>Threshold for rms of post-fit spectra flag</description>
        <value>4.0</value>
    </param>

    <param type="bool" name="flag_prfrm" >
        <description>True to flag data by running mean of pre-fit spectra</description>
        <value>True</value>
    </param>

    <param type="double" name="prfrm_thresh" subparam="true">
        <description>Threshold for running mean of pre-fit spectra flag</description>
        <value>5.5</value>
    </param>

    <param type="int" name="prfrm_nmean" subparam="true">
        <description>Number of channel for running mean of pre-fit spectra flag</description>
        <value>5</value>
    </param>

    <param type="bool" name="flag_pofrm" >
        <description>True to flag data by running mean of post-fit spectra</description>
        <value>True</value>
    </param>

    <param type="double" name="pofrm_thresh" subparam="true">
        <description>Threshold for running mean of post-fit spectra flag</description>
        <value>5.0</value>
    </param>

    <param type="int" name="pofrm_nmean" subparam="true">
        <description>Number of channel for running mean of post-fit spectra flag</description>
        <value>5</value>
    </param>

    <param type="bool" name="flag_user">
        <description>True to flag data by user flag (not implemented yet)</description>
        <value>False</value>
    </param>

    <param type="double" name="user_thresh" subparam="true">
        <description>Threshold for user flag</description>
        <value>5.0</value>
    </param>

    <param type="bool" name="docombine">
        <description>Combine all antenna data into one</description>
        <value>True</value>
    </param>

    <param type="any" name="gridsize">
        <description>Cell size for gridding (-1 stands for automatic determination)</description>
        <any type="variant" limittype="int double"/>
        <value type="double">-1</value>
    </param>

    <param type="intArray" name="moments">
        <description>List of moments to be calculated</description>
        <value>0</value>
    </param>

    <param type="bool" name="plotcluster">
        <description>Create plots for clustering analysis</description>
        <value>True</value>
    </param>

    <param type="bool" name="plotflag">
        <description>Create plots for flagging</description>
        <value>True</value>
    </param>

    <param type="bool" name="plotfit">
        <description>Create plots for baseline fitting</description>
        <value>True</value>
    </param>

    <param type="bool" name="plotspectra">
        <description>Create plots for result spectra</description>
        <value>True</value>
    </param>

    <param type="bool" name="plotchmap">
        <description>Create channel maps</description>
        <value>True</value>
    </param>

    <param type="bool" name="plotspmap">
        <description>Create sparse spectra maps</description>
        <value>True</value>
    </param>

    <param type="bool" name="plotcombine">
        <description>Create plots for combined data</description>
        <value>True</value>
    </param>

    <param type="string" name="pipelinemode">
	<description>The pipeline operating  mode</description>
	<value>automatic</value>
	<allowed kind="enum">
	    <value>automatic</value>
	    <value>interactive</value>
	    <value>getinputs</value>
	</allowed>
    </param>

    <param type="stringArray" name="infiles" subparam="true">
	<description>List of input measurement sets</description>
	<value></value>
    </param>

    <param type="any" name="antennalist" subparam="true">
        <description>List of antennas to be processed (-1 stands for all)</description>
        <any type="variant" limittype="string int stringArray intArray"/>
        <value type="int">-1</value>
    </param>

    <param type="any" name="spwlist" subparam="true">
        <description>List of spectral windows to be processed (-1 stands for all)</description>
        <any type="variant" limittype="int intArray"/>
        <value type="int">-1</value>
    </param>

    <param type="any" name="pollist" subparam="true">
        <description>List of polarizations to be processed (-1 stands for all)</description>
        <any type="variant" limittype="int intArray"/>
        <value type="int">-1</value>
    </param>

    <param type="any" name="scanlist" subparam="true">
        <description>List of scan numbers to be processed (-1 stands for all)</description>
        <any type="variant" limittype="int intArray"/>
        <value type="int">-1</value>
    </param>

    <param type="any" name="rowlist" subparam="true">
        <description>List of row numbers to be processed (-1 stands for all)</description>
        <any type="variant" limittype="int intArray"/>
        <value type="int">-1</value>
    </param>

<!-- 
     we may drop the following parameters since those 
     are little or nothing used. 
    <param type="any" name="scanbase" subparam="true">
        <description>List of scans to be processed (-1 stands for all)</description>
        <any type="variant" limittype="int intArray"/>
        <value type="int">-1</value>
    </param>

    <param type="any" name="rowbase" subparam="true">
        <description>List of row ids to be processed (-1 stands for all)</description>
        <any type="variant" limittype="int intArray"/>
        <value type="int">-1</value>
    </param>
-->

    <param type="bool" name="dryrun" subparam="true">
	<description>Run the task (False) or display the task command (True)</description>
	<value>False</value>
    </param>

    <param type="bool" name="acceptresults" subparam="true">
	<description>Add the results into the pipeline context</description>
	<value>True</value>
    </param>

    <constraints>
        <when param="flag_tsys">
            <equals type="bool" value="True">
                <default param="tsys_thresh"><value type="double">3.0</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>
        <when param="flag_weath">
            <equals type="bool" value="False">
            </equals>
            <equals type="bool" value="True">
                <default param="weath_thresh"><value type="double">3.0</value></default>
            </equals>
        </when>
        <when param="flag_prfre">
            <equals type="bool" value="True">
                <default param="prfre_thresh"><value type="double">3.0</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>
        <when param="flag_pofre">
            <equals type="bool" value="True">
                <default param="pofre_thresh"><value type="double">1.3333</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>
        <when param="flag_prfr">
            <equals type="bool" value="True">
                <default param="prfr_thresh"><value type="double">4.5</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>
        <when param="flag_pofr">
            <equals type="bool" value="True">
                <default param="pofr_thresh"><value type="double">4.0</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>
        <when param="flag_prfrm">
            <equals type="bool" value="True">
                <default param="prfrm_thresh"><value type="double">5.5</value></default>
                <default param="prfrm_nmean"><value type="int">5</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>
        <when param="flag_pofrm">
            <equals type="bool" value="True">
                <default param="pofrm_thresh"><value type="double">5.0</value></default>
                <default param="pofrm_nmean"><value type="int">5</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>
        <when param="flag_user">
            <equals type="bool" value="False">
            </equals>
            <equals type="bool" value="True">
                <default param="user_thresh"><value type="double">5.0</value></default>
            </equals>
        </when>
	<when param="pipelinemode">
	    <equals type="string" value="automatic">
	    </equals>
	    <equals type="string" value="interactive">
                <default param="infiles"><value type="stringArray"></value></default>
                <default param="antennalist"><value type="int">-1</value></default>
                <default param="spwlist"><value type="int">-1</value></default>
                <default param="pollist"><value type="int">-1</value></default>
                <default param="scanlist"><value type="int">-1</value></default>
                <default param="rowlist"><value type="int">-1</value></default>
		<default param="dryrun"><value type="bool">False</value></default>
		<default param="acceptresults"><value type="bool">True</value></default>
	    </equals>
	    <equals type="string" value="getinputs">
                <default param="infiles"><value type="stringArray"></value></default>
                <default param="antennalist"><value type="int">-1</value></default>
                <default param="spwlist"><value type="int">-1</value></default>
                <default param="pollist"><value type="int">-1</value></default>
                <default param="scanlist"><value type="int">-1</value></default>
                <default param="rowlist"><value type="int">-1</value></default>
	    </equals>
	</when>
    </constraints>

</input>

<output>
    <param type="any" name="results">
        <description>The output results object</description>
        <any type="variant"/>
        <value></value>
    </param>
</output>
<returns type="void"/>


<example>

The hsd_reduce is an end-to-end data reduction task for single dish 
heuristics. 


Keyword arguments:

---- pipeline parameter arguments which can be set in any pipeline mode
iteration -- Number of iterations to improve baseline quality for spectral 
       line data. Usually, two or three iterations are enough to get 
       nice baseline. 
       default: 2

continuum -- True to process continuum component.
       default: False

docontsub -- True to subtract continuum component using edge of the map. 
       default: False

edge -- Number of channels to be dropped from the edge.
       The value must be a list of integer with length of one or two.
       If list length is one, same number will be applied both side of 
       the band.
       default: [0,0]
       example: [10,20], [10]

linewindow -- Optional predefined line window. You can set predefined line 
       window if you want. Otherwise, the heuristics tries to find lines 
       automatically. Two types of format are acceptable. One is channel-
       based specification, 
   
          [min_chan,max_chan] 

       and the other is specification by central frequency in GHz plus 
       line range as velocity in km/s, 
   
          [center_freq, min_vel, max_vel]

       You can set multiple line windows by using nested list. However, 
       the above notation must not be mixed in the list for multiple line 
       windows.
       default: [] (find line)
       example: [100.0,200.0], [115.0,-10.0,10.0]

broadline -- True if spectral profile can contain broad line component.
       default: False

firorder -- Maximum order of the baseline fit. Default value (-1) 
       activates automatic determination of maximum fitting order.
       default: -1
       example: 1

fitfunc -- Specify fitting function. So far, 'polynomial' (polynomial 
       function) and 'spline' (cubic spline) are available. Also, 
       sdbaseline style ('poly' and 'cspline') are acceptable.
       default: 'spline'

flag_tsys -- Activate (True) or deactivate (False) Tsys flag.
       default: True

tsys_thresh -- Threshold value for Tsys flag.
       default: 3.0

flag_weath -- Activate (True) or deactivate (False) weather flag. 
       Since weather flagging is not implemented yet. Setting True 
       has no effect at the moment.
       default: False

weath_thresh -- Threshold value for weather flag.
       default: 3.0

flag_prfre -- Activate (True) or deactivate (False) flag by expected rms 
       of pre-fit spectra.
       default: True

prfre_thresh -- Threshold value for flag by expected rms of pre-fit 
       spectra. 
       default: 3.0 

flag_pofre -- Activate (True) or deactivate (False) flag by expected rms 
       of post-fit spectra.
       default: True

pofre_thresh -- Threshold value for flag by expected rms of post-fit 
       spectra. 
       default: 1.3333

flag_prfr -- Activate (True) or deactivate (False) flag by rms of pre-fit 
       spectra.
       default: True

prfr_thresh -- Threshold value for flag by rms of pre-fit spectra. 
       default: 4.5

flag_pofr -- Activate (True) or deactivate (False) flag by rms of post-fit 
       spectra.
       default: True

pofr_thresh -- Threshold value for flag by rms of post-fit spectra. 
       default: 4.0

flag_prfrm -- Activate (True) or deactivate (False) flag by running mean 
       of pre-fit spectra.
       default: True

prfrm_thresh -- Threshold value for flag by running mean of pre-fit 
       spectra. 
       default: 5.5

prfrm_nmean -- Number of channels for running mean of pre-fit spectra.
       default: 5

flag_pofrm -- Activate (True) or deactivate (False) flag by running mean 
       of post-fit spectra.
       default: True

pofrm_thresh -- Threshold value for flag by running mean of post-fit 
       spectra. 
       default: 5.0

pofrm_nmean -- Number of channels for running mean of post-fit spectra.
       default: 5

flag_user -- Activate (True) or deactivate (False) user-defined flag. 
       Since user flagging is not implemented yet. Setting True 
       has no effect at the moment.
       default: False

user_thresh -- Threshold value for flag by user-defined rule.
       default: 3.0

docombine -- True to combine data from all antenna into one in addition to 
       grid data each antenna separately. If available antenna is only 
       one, this parameter has no effect.
       default: True 

gridsize -- Optional grid size. Default (-1) is to use beam radius that 
       is evaluated from antenna diameter and observing frequency.
       If you set the value as float, it is interpreted as arcsec.
       default: -1
       example: 30.0

moments -- List of integers that indicates moments to be calculated for 
       created images. Allowed values are from -1 to 11. Please refer 
       'help immoments' for more information about moments.
       default: [0]
       example: [-1,0,3]

plotcluster -- True to plot result of clustering analysis.
       default: True

plotflag -- True to plot result of data flagging.
       default: True

plotfit -- True to plot result of baseline fit with flag result.
       default: True

plotspectra -- True to plot gridded spectra.
       default: True

plotchmap -- True to plot channel map for detected lines.
       default: True

plotspmap -- True to plot sparse spectra map.
       default: True

plotcombine -- True to plot combined single dish data over antenna.
       default: True

pipelinemode -- The pipeline operating mode. In 'automatic' mode the 
       pipeline determines the values of all context defined pipeline 
       inputs automatically.  In interactive mode the user can set the 
       pipeline context defined parameters manually. In 'getinputs' mode 
       the user can check the settings of all pipeline parameters without 
       running the task.
       default: 'automatic'.

---- pipeline context defined parameter argument which can be set only in
'interactive mode' or 'getinputs' modes 

infiles -- ASDM or MS files to be processed. This parameter behaves as 
       data selection parameter. The name specified by infiles must be 
       registered to context before you run hsd_reduce.
       default: [] (process all data in context)

antennalist -- List of antenna ids to be processed. Antenna name is also 
       acceptable. But id (integer) and name (string) must not mixed in 
       the list.
       default: -1 (all antennas in the data)
       example: 0, ['DV01','PM03']

spwlist -- List of spectral windows to be processed.
       default: -1 (all spectral windows for target)
       example: [0,2]

pollist -- List of polarization ids to be processed.
       default: -1 (all polarization components for target)
       example: [0]

scanlist -- List of scan numbers to be processed.
       default: -1 (all scans for target)
       example: [0,1,2]

rowlist -- List of row numbers to be processed.
       default: -1 (all rows for target)
       example: [0,1,2,3,5]

--- pipeline task execution modes
dryrun -- Run the commands (True) or generate the commands to be run but
       do not execute (False).
       default: True

acceptresults -- Add the results of the task to the pipeline context 
       (True) or reject them (False).
       default: True


Output:

results -- If pipeline mode is 'getinputs' then None is returned. Otherwise
       the results object for the pipeline task is returned.


Description

The hsd_reduce task execute whole processes for single dish heuristics 
script at one task call. The process contains the following staps:

1. Import data
Any data are imported as a single dish format, Scantable. If input data 
(ASDM or MS) contains several antennas, the data will be splitted per 
antenna.

2. Grouping
Data are grouped by time stamp and observed position on the sky. 

3. Line detection
For spectral data, the heuristics tries to detect any spectral line 
features by default. If you set pre-defined line window, line detection 
will be skipped.

4. Line validation
For spectral data, detected line features are validated using clustering 
analysis. Valid lines are masked when spectral baseline is subtracted. 
If you set pre-defined line window, line validation will also be skipped.

5. Baseline subtraction
For spectral data, baseline subtraction is done using masks determined 
by line detection/validation stages, or pre-defined line window. So far, 
polynomial and cubic spline fitting are available. Order of fitting 
or number of sections for fitting are automatically determined.

6. Flagging 
Data are flagged based on several flagging rules. Available rules are: 
expected rms, calculated rms, and running mean of both pre-fit and 
post-fit spectra. Tsys flagging is also available. 

7. Gridding 
Data are convolved onto regularly spaced spacial grid. If several antennas 
are included in the data, and those are observing same target, the single 
dish heuristics tries to combine data from those antennas to create one 
image. 

8. Imaging
FITS images are created based on gridding. In addition to full channel 
images, line window images are also be created. Also, moment maps are 
created if you set something to moments parameter.

In addition, the heuristics script creates many plots for each stage. 
Those plots are included in the weblog.


Issues

Combining: efficiency factors are set to 1.0 for all antennas so far.


Examples


</example>
</task>
</casaxml>
