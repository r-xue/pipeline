<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" ?>
<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd file:///opt/casa/code/xmlcasa/xml/casa.xsd">

<task type="function" name="hsd_flagbaseline" category="pipeline">
<shortdescription>Composite task consisting of hsd_baseline and hsd_blflag. Iteration loop is encapsulated.</shortdescription>
<description>
</description>
<input>
    <param type="int" name="iteration">
        <description>Number of iteration</description>
        <value>2</value>
    </param>

    <param type="string" name="fitfunc">
        <description>Fitting function for baseline subtraction</description>
	<value>cspline</value>
	<allowed kind="enum">
	    <value>cspline</value>
	    <value>spline</value>
	    <value>polynomial</value>
	    <value>poly</value>
	    <value>CSPLINE</value>
	    <value>SPLINE</value>
	    <value>POLYNOMIAL</value>
	    <value>POLY</value>
	</allowed>
    </param>

    <param type="int" name="fitorder">
        <description>Fitting order for baseline subtraction</description>
	<value>-1</value>
    </param>
    
    <param type="intArray" name="linewindow">
        <description>Pre-defined line window</description>
	<value></value>
    </param>

    <param type="intArray" name="edge">
        <description>Edge channels to be dropped</description>
	<value></value>
    </param>

    <param type="bool" name="broadline">
        <description>Try to detect broad component of the line</description>
	<value>True</value>
    </param>

    <param type="int" name="flag_iteration">
        <description>Number of iteration for flagging</description>
        <value>5</value>
    </param>

    <param type="bool" name="flag_tsys" >
        <description>True to flag data by Tsys</description>
        <value>True</value>
    </param>
        
    <param type="double" name="tsys_thresh" subparam="true">
        <description>Threshold for Tsys flag</description>
        <value>3.0</value>
    </param>
        
    <param type="bool" name="flag_weath">
        <description>True to flag data by weather (not implemented yet)</description>
        <value>False</value>
    </param>

    <param type="double" name="weath_thresh" subparam="true">
        <description>Threshold for weather flag</description>
        <value>3.0</value>
    </param>

    <param type="bool" name="flag_prfre" >
        <description>True to flag data by expected rms of pre-fit spectra</description>
        <value>True</value>
    </param>

    <param type="double" name="prfre_thresh" subparam="true">
        <description>Threshold for expected rms of pre-fit spetra flag</description>
        <value>3.0</value>
    </param>

    <param type="bool" name="flag_pofre" >
        <description>True to flag data by expected rms of post-fit spectra</description>
        <value>True</value>
    </param>

    <param type="double" name="pofre_thresh"  subparam="true">
        <description>Threshold for expected rms of post-fit spectra flag</description>
        <value>1.3333</value>
    </param>

    <param type="bool" name="flag_prfr" >
        <description>True to flag data by rms of pre-fit spectra</description>
        <value>True</value>
    </param>

    <param type="double" name="prfr_thresh"  subparam="true">
        <description>Threshold for rms of pre-fit flag</description>
        <value>4.5</value>
    </param>

    <param type="bool" name="flag_pofr" >
        <description>True to flag data by rms of post-fit spectra</description>
        <value>True</value>
    </param>

    <param type="double" name="pofr_thresh" subparam="true">
        <description>Threshold for rms of post-fit spectra flag</description>
        <value>4.0</value>
    </param>

    <param type="bool" name="flag_prfrm" >
        <description>True to flag data by running mean of pre-fit spectra</description>
        <value>True</value>
    </param>

    <param type="double" name="prfrm_thresh" subparam="true">
        <description>Threshold for running mean of pre-fit spectra flag</description>
        <value>5.5</value>
    </param>

    <param type="int" name="prfrm_nmean" subparam="true">
        <description>Number of channel for running mean of pre-fit spectra flag</description>
        <value>5</value>
    </param>

    <param type="bool" name="flag_pofrm" >
        <description>True to flag data by running mean of post-fit spectra</description>
        <value>True</value>
    </param>

    <param type="double" name="pofrm_thresh" subparam="true">
        <description>Threshold for running mean of post-fit spectra flag</description>
        <value>5.0</value>
    </param>

    <param type="int" name="pofrm_nmean" subparam="true">
        <description>Number of channel for running mean of post-fit spectra flag</description>
        <value>5</value>
    </param>

    <param type="bool" name="flag_user">
        <description>True to flag data by user flag (not implemented yet)</description>
        <value>False</value>
    </param>

    <param type="double" name="user_thresh" subparam="true">
        <description>Threshold for user flag</description>
        <value>5.0</value>
    </param>

    <param type="bool" name="plotflag">
        <description>Create plots for flagging</description>
        <value>True</value>
    </param>

    <param type="string" name="pipelinemode">
	<description>The pipeline operating mode</description>
	<value>automatic</value>
	<allowed kind="enum">
	    <value>automatic</value>
	    <value>interactive</value>
	    <value>getinputs</value>
	</allowed>
    </param>

    <param type="stringArray" name="infiles" subparam="true">
        <description>List of input files to be calibrated (default all)</description>
        <value></value>
    </param>

    <param type="any" name="spw" subparam="true">
            <description>select data by IF IDs (spectral windows), e.g. \'3,5,7\' (\'\'=all)</description>
            <any type="variant" limittypes="string stringArray"/>
            <value type="string"></value>
    </param>

    <param type="any" name="pol" subparam="true">
            <description>select data by polarizations, e.g. \'0~1\' (\'\'=all)</description>
            <any type="variant" limittypes="string stringArray"/>
            <value type="string"></value>
    </param>

    <param type="bool" name="dryrun" subparam="true">
	<description>Run the task (False) or display task command (True)</description>
	<value>False</value>
    </param>

    <param type="bool" name="acceptresults" subparam="true">
	<description>Add the results into the pipeline context</description>
	<value>True</value>
    </param>

    <constraints>
        <when param="flag_tsys">
            <equals type="bool" value="True">
                <default param="tsys_thresh"><value type="double">3.0</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>
        <when param="flag_weath">
            <equals type="bool" value="False">
            </equals>
            <equals type="bool" value="True">
                <default param="weath_thresh"><value type="double">3.0</value></default>
            </equals>
        </when>
        <when param="flag_prfre">
            <equals type="bool" value="True">
                <default param="prfre_thresh"><value type="double">3.0</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>
        <when param="flag_pofre">
            <equals type="bool" value="True">
                <default param="pofre_thresh"><value type="double">1.3333</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>
        <when param="flag_prfr">
            <equals type="bool" value="True">
                <default param="prfr_thresh"><value type="double">4.5</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>
        <when param="flag_pofr">
            <equals type="bool" value="True">
                <default param="pofr_thresh"><value type="double">4.0</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>
        <when param="flag_prfrm">
            <equals type="bool" value="True">
                <default param="prfrm_thresh"><value type="double">5.5</value></default>
                <default param="prfrm_nmean"><value type="int">5</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>
        <when param="flag_pofrm">
            <equals type="bool" value="True">
                <default param="pofrm_thresh"><value type="double">5.0</value></default>
                <default param="pofrm_nmean"><value type="int">5</value></default>
            </equals>
            <equals type="bool" value="False">
            </equals>
        </when>
        <when param="flag_user">
            <equals type="bool" value="False">
            </equals>
            <equals type="bool" value="True">
                <default param="user_thresh"><value type="double">5.0</value></default>
                            </equals>
        </when>
        <when param="pipelinemode">
            <equals type="string" value="automatic">
            </equals>
            <equals type="string" value="interactive">
                <default param="infiles"><value type="stringArray"></value></default>
                <default param="spw"><value type="string"></value></default>
                <default param="pol"><value type="string"></value></default>
                <default param="dryrun"><value type="bool">False</value></default>
                <default param="acceptresults"><value type="bool">True</value></default>
            </equals>
            <equals type="string" value="getinputs">
                <default param="infiles"><value type="stringArray"></value></default>
                <default param="spw"><value type="string"></value></default>
                <default param="pol"><value type="string"></value></default>
            </equals>
        </when>
    </constraints>

</input>

<output>
    <param type="any" name="results">
        <description>The output results object</description>
        <any type="variant"/>
        <value></value>
    </param>
</output>
<returns type="void"/>


<example>
The hsd_flagbaseline task is a composite task consisting of hsd_baseline 
and hsd_blflag task. It encapsulates iteration loop inside. By defalult 
(iteration=2), execution of hsd_flagbaseline task is equivalent to the 
following code:

for i in xrange(iteration):
    default(hsd_baseline)
    hsd_baseline()
    default(hsd_blflag)
    hsd_blflag()
    
For details about hsd_baseline and hsd_blflag, see inline help for 
those tasks. 
  
Keyword arguments:

---- pipeline parameter arguments which can be set in any pipeline mode
iteration -- Number of iterations to improve baseline quality for spectral 
       line data. Usually, two or three iterations are enough to get 
       nice baseline. 
       default: 2

fitfunc -- fitting function for baseline subtraction. You can choose
   either cubic spline ('spline' or 'cspline') or polynomial ('polynomial'
   or 'poly').
   default: 'cspline'.

fitorder -- Fitting order for polynomial. For cubic spline, it is used
   to determine how much the spectrum is segmented into. Default (-1) is
   to determine the order automatically.
   default: -1 (auto determination)

linewindow -- Pre-defined line window. If this is set, specified line 
   windows are used as a line mask for baseline subtraction instead to 
   determine masks based on line detection and validation stage. Two 
   types of format are acceptable. One is channel-based specification, 
   
      [min_chan,max_chan] 

   and the other is specification by central frequency in GHz plus 
   line range as velocity in km/s, 
   
      [center_freq, min_vel, max_vel]

   You can set multiple line windows by using nested list. However, 
   the above notation must not be mixed in the list for multiple line 
   windows.
   default: [] (do line detection and validation)
   example: [100.0,200.0], [115.0,-10.0,10.0]

edge -- number of edge channels to be dropped from baseline subtraction.
   the value must be a list with length of 2, whose values specifies
   left and right edge channels respectively.
   default: [] ([0,0])
   example: [10,10]

broadline -- Try to detect broad component of spectral line if True.
   default: True

flag_iteration -- Number of iterations to perform sigma clipping to calculate
   threshold value of flagging.
   default: 5
   
flag_tsys -- Activate (True) or deactivate (False) Tsys flag.
       default: True

tsys_thresh -- Threshold value for Tsys flag.
       default: 3.0

flag_weath -- Activate (True) or deactivate (False) weather flag. 
       Since weather flagging is not implemented yet. Setting True 
       has no effect at the moment.
       default: False

weath_thresh -- Threshold value for weather flag.
       default: 3.0

flag_prfre -- Activate (True) or deactivate (False) flag by expected rms 
       of pre-fit spectra.
       default: True

                prfre_thresh -- Threshold value for flag by expected rms of pre-fit 
       spectra. 
       default: 3.0 

flag_pofre -- Activate (True) or deactivate (False) flag by expected rms 
       of post-fit spectra.
       default: True

pofre_thresh -- Threshold value for flag by expected rms of post-fit 
       spectra. 
       default: 1.3333

flag_prfr -- Activate (True) or deactivate (False) flag by rms of pre-fit 
       spectra.
       default: True

prfr_thresh -- Threshold value for flag by rms of pre-fit spectra. 
       default: 4.5

flag_pofr -- Activate (True) or deactivate (False) flag by rms of post-fit 
       spectra.
       default: True

                pofr_thresh -- Threshold value for flag by rms of post-fit spectra. 
       default: 4.0

flag_prfrm -- Activate (True) or deactivate (False) flag by running mean 
       of pre-fit spectra.
       default: True

prfrm_thresh -- Threshold value for flag by running mean of pre-fit 
       spectra. 
       default: 5.5

prfrm_nmean -- Number of channels for running mean of pre-fit spectra.
       default: 5

flag_pofrm -- Activate (True) or deactivate (False) flag by running mean 
       of post-fit spectra.
       default: True

pofrm_thresh -- Threshold value for flag by running mean of post-fit 
       spectra. 
       default: 5.0

pofrm_nmean -- Number of channels for running mean of post-fit spectra.
                       default: 5

flag_user -- Activate (True) or deactivate (False) user-defined flag. 
       Since user flagging is not implemented yet. Setting True 
       has no effect at the moment.
       default: False

user_thresh -- Threshold value for flag by user-defined rule.
       default: 3.0

plotflag -- True to plot result of data flagging.
       default: True

pipelinemode -- The pipeline operating mode. In 'automatic' mode the 
   pipeline determines the values of all context defined pipeline inputs
   automatically.  In 'interactive' mode the user can set the pipeline
   context defined parameters manually.  In 'getinputs' mode the user
   can check the settings of all pipeline parameters without running
   the task.
   default: 'automatic'.

---- pipeline context defined parameter argument which can be set only in
'interactive mode'

infiles -- List of data files. These must be a name of Scantables that 
   are registered to context via hsd_importdata task.
   default: []
   example: vis=['X227.PM01.asap', 'X227.PM02.asap']

spw -- Data selection by spw.
   default: '' (all spws)
   example: '3,4' (generate caltable for spw 3 and 4)
            ['0','2'] (spw 0 for first data, 2 for second)

pol -- Data selection by pol.
   default: '' (all polarizations)
   example: '0' (generate caltable for pol 0)
            ['0~1','0'] (pol 0 and 1 for first data, only 0 for second)

--- pipeline task execution modes

dryrun -- Run the commands (True) or generate the commands to be run but
   do not execute (False).
   default: True

acceptresults -- Add the results of the task to the pipeline context (True) or
   reject them (False).
   default: True

Output:

results -- If pipeline mode is 'getinputs' then None is returned. Otherwise
   the results object for the pipeline task is returned.


Examples


</example>
</task>
</casaxml>
