<casaxml xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd file:///opt/casa/code/xmlcasa/xml/casa.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://casa.nrao.edu/schema/psetTypes.html">

<task category="pipeline" name="hifv_checkflag" type="function">
<shortdescription>Run flagdata in rflag mode</shortdescription>
<description>
</description>
<input>
    <param name="vis" type="stringVec">
        <shortdescription>List of input visibility data</shortdescription>
        <description>List of visibility data files. These may be ASDMs, tar files of ASDMs,
                     MSes, or tar files of MSes, If ASDM files are specified, they will be
                     converted  to MS format.
                     example: vis=['X227.ms', 'asdms.tar.gz']
        </description>
        <value/>
    </param>

    <param name="checkflagmode" type="string">
        <shortdescription>String name of the mode to run checkflag</shortdescription>
        <description>-- blank string default use of rflag on bandpass and delay calibrators
                     -- use string 'semi' after hifv_semiFinalBPdcals() for executing rflag on calibrators
                     -- use string 'bpd', for the bandpass and delay calibrators:
                          execute rflag on all calibrated cross-hand corrected data;
                          extend flags to all correlations
                          execute rflag on all calibrated parallel-hand residual data;
                          extend flags to all correlations
                          execute tfcrop on all calibrated cross-hand corrected data,
                            per visibility; extend flags to all correlations
                          execute tfcrop on all calibrated parallel-hand corrected data,
                            per visibility; extend flags to all correlations
                     -- use string 'allcals', for all the other calibrators, with delays and BPcal applied:
                           similar procedure as 'bpd' mode, but uses corrected data throughout
                     -- use string 'target', for the target data:
                           similar procedure as 'allcals' mode, but with a higher SNR cutoff
                           for rflag to avoid flagging data due to source structure, and
                           with an additional series of tfcrop executions to make up for
                           the higher SNR cutoff in rflag
                     -- VLASS specific modes include 'bpd-vlass', 'allcals-vlass', and 'target-vlass'
                           which calculate thresholds to use per spw/field/scan (action='calculate', then,
                           per baseband/field/scan, replace all spw thresholds above the median with the median,
                           before re-running rflag with the new thresholds.  This has the effect of
                           lowering the thresholds for spws with RFI to be closer to the RFI-free
                           thresholds, and catches more of the RFI.
                     -- Mode 'vlass-imaging' is similar to 'target-vlass', except that it executes on the split off target
                           data, intent='*TARGET', datacolumn='data' and uses a timedevscale of 4.0.
        </description>
        <value/>
            </param>

    <param name="pipelinemode" type="string">
        <shortdescription>The pipeline operating mode</shortdescription>
        <description>The pipeline operating mode. In 'automatic' mode the pipeline
                     determines the values of all context defined pipeline inputs
                     automatically.  In 'interactive' mode the user can set the pipeline
                     context defined parameters manually.  In 'getinputs' mode the user
                     can check the settings of all pipeline parameters without running
                     the task.</description>
        <value>automatic</value>
        <allowed kind="enum">
            <value>automatic</value>
            <value>interactive</value>
            <value>getinputs</value>
        </allowed>
    </param>

    <param type="bool" name="overwrite_modelcol">
        <description>Always write the model column, even if it already exists</description>
        <value>False</value>
    </param>

    <param subparam="true" name="dryrun" type="bool">
        <shortdescription>Run the task (False) or display task command (True)</shortdescription>
        <description>Run the commands (True) or generate the commands to be run but
                     do not execute (False).  This is a pipeline task execution mode.
        </description>
        <value>False</value>
    </param>

    <param subparam="true" name="acceptresults" type="bool">
        <shortdescription>Add the results into the pipeline context</shortdescription>
        <description>Add the results of the task to the pipeline context (True) or
                     reject them (False).  This is a pipeline task execution mode.
        </description>
        <value>True</value>
    </param>

    <constraints>
	<when param="pipelinemode">
	    <equals value="automatic" type="string">
	    </equals>
	    <equals value="interactive" type="string">
                <default param="vis"><value type="stringVec"/></default>
		<default param="dryrun"><value type="bool">False</value></default>
		<default param="acceptresults"><value type="bool">True</value></default>
	    </equals>
	    <equals value="getinputs" type="string">
                <default param="vis"><value type="stringVec"/></default>
	    </equals>
	</when>
    </constraints>

</input>


<returns>any</returns>


<example>

Output:

results -- If pipeline mode is 'getinputs' then None is returned. Otherwise
   the results object for the pipeline task is returned.


Examples

1. Run RFLAG with associated heuristics in the VLA CASA pipeline.

   hifv_checkflag()


</example>
</task>
</casaxml>
