<casaxml xmlns="http://casa.nrao.edu/schema/psetTypes.html" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd file:///opt/casa/code/xmlcasa/xml/casa.xsd">

<task category="pipeline" name="hifv_importdata" type="function">
<shortdescription>Imports data into the VLA pipeline</shortdescription>
<description>The hifv_importdata task loads the specified visibility data into the pipeline
             context unpacking and / or converting it as necessary.
</description>
<input>
    <param name="vis" type="stringVec">
	<shortdescription>List of input visibility data</shortdescription>
        <description>List of visibility data files. These may be ASDMs, tar files of ASDMs,
                     MSes, or tar files of MSes, If ASDM files are specified, they will be
                     converted  to MS format.
                     example: vis=['X227.ms', 'asdms.tar.gz']
        </description>
	<value/>
    </param>

    <param name="session" type="stringVec">
	<shortdescription>List of visibility data sessions</shortdescription>
        <description>List of sessions to which the visibility files belong. Defaults
                     to a single session containing all the visibility files, otherwise
                     a session must be assigned to each vis file.
                     example: session=['Session_1', 'Sessions_2']
        </description>
	<value/>
    </param>

    <param name="pipelinemode" type="string">
	<shortdescription>The pipeline operating mode</shortdescription>
        <description>The pipeline operating mode. In 'automatic' mode the pipeline
                     determines the values of all context defined pipeline inputs
                     automatically.  In 'interactive' mode the user can set the pipeline
                     context defined parameters manually.  In 'getinputs' mode the user
                     can check the settings of all pipeline parameters without running
                     the task.</description>
	<value>automatic</value>
	<allowed kind="enum">
	    <value>automatic</value>
	    <value>interactive</value>
	    <value>getinputs</value>
	</allowed>
    </param>

    <param name="asis" subparam="true" type="string">
	<shortdescription>ASDM to convert as is</shortdescription>
        <description>ASDM to convert as is 
                     Only can be set in pipelinemode='interactive'
                     examples: 'Receiver CalAtmosphere'
                     'Receiver', ''
        </description>
	<value>Receiver CalAtmosphere</value>
    </param>

    <param name="overwrite" subparam="true" type="bool">
	<shortdescription>Overwrite existing files on import</shortdescription>
        <description>Only can be set in pipelinemode='interactive'
        </description>
	<value>False</value>
    </param>

    <param name="nocopy" subparam="true" type="bool">
        <shortdescription>Disable copying of MS to working directory</shortdescription>
        <description>When importing an MS, disable copying of the MS to the working directory.
                     Only can be set in pipelinemode='interactive'
        </description>
        <value>False</value>
    </param>

    <param name="createmms" type="string">
        <shortdescription>Create an MMS</shortdescription>
        <description>Create a multi-MeasurementSet ('true') ready for parallel
                     processing, or a standard MeasurementSet ('false'). The default setting
                     ('automatic') creates an MMS if running in a cluster environment.
        </description>
    <value>false</value>
        <allowed kind="enum">
            <value>automatic</value>
            <value>true</value>
            <value>false</value>
        </allowed>
    </param>

    <param name="ocorr_mode" subparam="true" type="string">
	<shortdescription>Default set to CROSS_ONLY (co)</shortdescription>
        <description>Read in cross- and auto-correlation data(ca), cross-
                     correlation data only (co), or autocorrelation data only (ao).
        </description>
	<value>co</value>
    </param>

    <param name="datacolumns" subparam="true" type="any">
        <any type="variant"/>
        <shortdescription>Define data type per column</shortdescription>
        <description>Dictionary defining the data types of
                     existing columns. The format is:

                     {'data': 'data type 1'[, 'corrected': 'data type 2']}

                     For ASDMs the data type can only be RAW and one
                     can only specify it for the data column.

                     For MSes one can define two different data types
                     for the DATA and CORRECTED_DATA columns and they
                     can be any of the known data types (RAW,
                     REGCAL_CONTLINE_ALL, REGCAL_CONTLINE_SCIENCE,
                     SELFCAL_CONTLINE_SCIENCE, REGCAL_LINE_SCIENCE,
                     SELFCAL_LINE_SCIENCE, BASELINED, ATMCORR). The
                     intent selection strings _ALL or _SCIENCE can be
                     skipped. In that case the task determines this
                     automatically by inspecting the existing intents
                     in the dataset.

                     Setting a data type of NONE ignores any existing
                     data in the given column.
        </description>
        <value>{}</value>
    </param>

    <param name="dryrun" subparam="true" type="bool">
	<shortdescription>Run the task (False) or display task command (True)</shortdescription>
        <description>Run the commands (True) or generate the commands to be run but
                     do not execute (False).  This is a pipeline task execution mode.
        </description>
	<value>False</value>
    </param>

    <param name="acceptresults" subparam="true" type="bool">
	<shortdescription>Add the results into the pipeline context</shortdescription>
        <description>Add the results of the task to the pipeline context (True) or
                     reject them (False).  This is a pipeline task execution mode.
        </description>
	<value>True</value>
    </param>

    <constraints>
	<when param="pipelinemode">
	    <equals type="string" value="automatic">
	    </equals>
	    <equals type="string" value="interactive">
                <default param="asis"><value type="string">Receiver CalAtmosphere</value></default>
                <default param="ocorr_mode"><value type="string">co</value></default>
		<default param="overwrite"><value type="bool">False</value></default>
		<default param="nocopy"><value type="bool">False</value></default>
		<default param="dryrun"><value type="bool">False</value></default>
		<default param="acceptresults"><value type="bool">True</value></default>
	    </equals>
	    <equals type="string" value="getinputs">
                <default param="asis"><value type="string">Receiver CalAtmosphere</value></default>
                <default param="ocorr_mode"><value type="string">co</value></default>
		<default param="overwrite"><value type="bool">False</value></default>
	    </equals>
	</when>
    </constraints>

</input>


<returns>any</returns>


<example>
Output:

results -- If pipeline mode is 'getinputs' then None is returned. Otherwise
   the results object for the pipeline task is returned.


Examples

1. Load an ASDM list in the ../rawdata subdirectory into the context.

   hifv_importdata (vis=['../rawdata/uid___A002_X30a93d_X43e',
                '../rawdata/uid_A002_x30a93d_X44e'])

2. Load an MS in the current directory into the context.

   hifv_importdata (vis=[uid___A002_X30a93d_X43e.ms])

3. Load a tarred ASDM in ../rawdata into the context.

   hifv_importdata (vis=['../rawdata/uid___A002_X30a93d_X43e.tar.gz'])

4. Check the hifv_importdata inputs, then import the data

   myvislist = ['uid___A002_X30a93d_X43e.ms', 'uid_A002_x30a93d_X44e.ms']
   hifv_importdata(vis=myvislist, pipelinemode='getinputs')
   hifv_importdata(vis=myvislist)

5. Load an ASDM but check the results before accepting them into the context.

   results = hifv_importdata (vis=['uid___A002_X30a93d_X43e.ms'],
       acceptresults=False)
   results.accept()

6. Run in  dryrun mode before running for real
   results = hifv_importdata (vis=['uid___A002_X30a93d_X43e.ms'], dryrun=True)
   results = hifv_importdata (vis=['uid___A002_X30a93d_X43e.ms'])

</example>
</task>
</casaxml>
