<casaxml xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://casa.nrao.edu/schema/psetTypes.html">

<task category="pipeline" name="hifv_flagdata" type="function">

<shortdescription>Do basic deterministic flagging of a list of MeasurementSets</shortdescription>
<description>The hifv_flagdata task performs basic flagging operations on a list of
MeasurementSets.

The hifv_flagdata task performs basic flagging operations on a list of measurements including:

o autocorrelation data flagging
o shadowed antenna data flagging
o scan based flagging
o edge channel flagging
o baseband edge flagging
o applying online flags
o applying a flagging template
o quack, shadow, and basebands
o Antenna not-on-source (ANOS)
</description>
<input>
    <param name="vis" type="stringVec">
        <shortdescription>List of input visibility data</shortdescription>
        <description>List of visibility data files. These may be ASDMs, tar files of ASDMs,
                     MSes, or tar files of MSes, If ASDM files are specified, they will be
                     converted  to MS format.
                     example: vis=['X227.ms', 'asdms.tar.gz']
        </description>
        <value/>
    </param>

    <param name="autocorr" type="bool">
        <description>Flag autocorrelation data</description>
        <value type="bool">True</value>
    </param>

    <param name="shadow" type="bool">
        <description>Flag shadowed antennas</description>
        <value type="bool">True</value>
    </param>

    <param subparam="true" name="tolerance" type="double">
        <shortdescription>Amount of antenna shadowing tolerated</shortdescription>
        <description>Amount of antenna shadowing tolerated, in meters. A positive number
            allows antennas to overlap in projection. A negative number forces antennas
            apart in projection. Zero implies a distance of radius_1+radius_2 between
            antenna centers.
        </description>
        <value>0.0</value>
    </param>

    <param name="scan" type="bool">
        <description>Flag specified scans</description>
        <value>True</value>
    </param>

    <param subparam="true" name="scannumber" type="string">
        <shortdescription>List of scans to be flagged</shortdescription>
        <description>A string containing a  comma delimited list of scans to be flagged.
                     example: '3,5,6'
        </description>
        <value/>
    </param>

        <param name="quack" type="bool">
        <description>Quack scans</description>
        <value>True</value>
    </param>

        <param name="clip" type="bool">
        <description>Clip mode</description>
        <value>True</value>
    </param>

        <param name="baseband" type="bool">
        <description>Flag 20MHz of each edge of basebands</description>
        <value>True</value>
    </param>

    <param subparam="true" name="intents" type="string">
        <shortdescription>List of intents of scans to be flagged</shortdescription>
        <description>A string containing a comma delimited list of intents against
                     which the scans to be flagged are matched.
                     example: '*BANDPASS*'
        </description>
        <value>*POINTING*,*FOCUS*,*ATMOSPHERE*,*SIDEBAND_RATIO*, *UNKNOWN*, *SYSTEM_CONFIGURATION*, *UNSPECIFIED#UNSPECIFIED*</value>
    </param>

    <param name="edgespw" type="bool">
        <shortdescription>Flag edge channels</shortdescription>
        <description>Fraction of the baseline correlator TDM edge channels to be flagged.</description>
        <value type="bool">True</value>
    </param>

    <param subparam="true" name="fracspw" type="double">
        <description>Fraction of baseline correlator edge channels to be flagged</description>
        <value>0.05</value>
    </param>


    <param name="online" type="bool">
        <description>Apply the online flags</description>
        <value type="bool">True</value>
    </param>

    <param subparam="true" name="fileonline" type="string">
        <shortdescription>File of online flags to be applied</shortdescription>
        <description>File containing the online flags. These are computed by the
                     h_init or hif_importdata data tasks. If the online flags files
                     are undefined a name of the form 'msname.flagonline.txt' is assumed.
        </description>
        <value/>
    </param>

    <param name="template" type="bool">
        <description>Apply a flagging template</description>
        <value>True</value>
    </param>

    <param subparam="true" name="filetemplate" type="stringVec">
        <shortdescription>File that contains the flagging template</shortdescription>
        <description>The name of a text file that contains the flagging template
                     for RFI, birdies, telluric lines, etc.  If the template flags files
                     is undefined a name of the form 'msname.flagtemplate.txt' is assumed.
        </description>
        <value/>
    </param>
    
    <param name="hm_tbuff" type="string">
        <description>The time buffer computation heuristic</description>
        <value>1.5int</value>
        <allowed kind="enum">
            <value>1.5int</value>
            <value>halfint</value>
            <value>manual</value>
        </allowed>
    </param>

        <param subparam="true" name="tbuff" type="any">
            <description>List of time buffers (sec) to pad timerange in flag commands</description>
            <type>double</type><type>doubleVec</type>
            <value type="double">0.0</value>
        </param>

    <param name="pipelinemode" type="string">
        <shortdescription>The pipeline operating mode</shortdescription>
        <description>The pipeline operating mode. In 'automatic' mode the pipeline
                     determines the values of all context defined pipeline inputs automatically.
                     In interactive mode the user can set the pipeline context defined parameters
                     manually.  In 'getinputs' mode the user can check the settings of all
                     pipeline parameters without running the task.
        </description>
        <value>automatic</value>
        <allowed kind="enum">
            <value>automatic</value>
            <value>interactive</value>
            <value>getinputs</value>
        </allowed>
    </param>

    <param subparam="true" name="flagbackup" type="bool">
        <description>Backup pre-existing flags before applying new ones. Only can be set in 
                     pipelinemode='interactive'.
        </description>
        <value type="bool">False</value>
    </param>

    <param subparam="true" name="dryrun" type="bool">
        <shortdescription>Run the task (False) or display task command (True)</shortdescription>
        <description>Run the commands (True) or generate the commands to be run but
                     do not execute (False).  This is a pipeline task execution mode.
        </description>
        <value>False</value>
    </param>

    <param subparam="true" name="acceptresults" type="bool">
        <shortdescription>Add the results into the pipeline context</shortdescription>
        <description>Add the results of the task to the pipeline context (True) or
                     reject them (False).  This is a pipeline task execution mode.
        </description>
        <value>True</value>
    </param>

    <constraints>
        <when param="pipelinemode">
            <equals value="automatic" type="string">
            </equals>
            <equals value="interactive" type="string">
                <default param="vis"><value type="stringVec"/></default>
                <default param="flagbackup"><value type="bool">False</value></default>
                <default param="dryrun"><value type="bool">False</value></default>
                <default param="acceptresults"><value type="bool">True</value></default>
            </equals>
            <equals value="getinputs" type="string">
                <default param="vis"><value type="stringVec"/></default>
                <default param="flagbackup"><value type="bool">False</value></default>
            </equals>
        </when>

        <when param="scan">
            <equals value="True" type="bool">
                <default param="scannumber"><value type="string"/></default>
                <default param="intents"><value type="string">*POINTING*,*FOCUS*,*ATMOSPHERE*,*SIDEBAND_RATIO*,*UNKNOWN*, *SYSTEM_CONFIGURATION*, *UNSPECIFIED#UNSPECIFIED*</value></default>
            </equals>
            <equals value="False" type="bool">
            </equals>
        </when>

        <when param="edgespw">
            <equals value="True" type="bool">
                <default param="fracspw"><value type="double">0.05</value></default>
            </equals>
            <equals value="False" type="bool">
            </equals>
        </when>

        <when param="online">
            <equals value="True" type="bool">
                <default param="fileonline"><value type="string"/></default>
            </equals>
            <equals value="False" type="bool">
            </equals>
        </when>

        <when param="template">
            <equals value="True" type="bool">
                <default param="filetemplate"><value type="stringVec"/></default>
            </equals>
            <equals value="False" type="bool">
            </equals>
        </when>


        <when param="hm_tbuff">
            <equals value="1.5int" type="string">
            </equals>
            <equals value="halfint" type="string">
            </equals>
            <equals value="manual" type="string">
                <default param="tbuff"><value type="double">0.0</value></default>
            </equals>
        </when>

    </constraints>
</input>


<returns>any</returns>


<example>
Output:

results -- If pipeline mode is 'getinputs' then None is returned. Otherwise
    the results object for the pipeline task is returned.
    
Examples

1. Do basic flagging on a MeasurementSet
    
    hifv_flagdata()

2. Do basic flagging on a MeasurementSet as well as flag pointing and
   atmosphere data

    hifv_flagdata(scan=True intent='*BANDPASS*')

</example>


</task>
</casaxml>
