from __future__ import absolute_import
import os.path
import sys
import traceback

import pipeline.infrastructure.casatools as casatools
import pipeline.infrastructure.logging as logging
import pipeline.infrastructure.displays as displays
import pipeline.infrastructure.taskreport as taskreport

LOG = logging.get_logger(__name__)


class WvrgcalReportInputs(taskreport.TaskReportInputs):
    def __init__(self, context, results, description='', stage_name=None,
     plot=True):
        
        super(WvrgcalReportInputs, self).__init__(
            context, None, description, stage_name, plot, results)


class WvrgcalReport(taskreport.TaskReport):
    Inputs = WvrgcalReportInputs
    
    def createGeneralHTMLDescription(self, stageName):
        return ''
    
    def createDetailedHTMLDescription(self, stageName, **kw):
        return ''

    def execute(self, dry_run=True, **parameters):
        stage = self.inputs.stage
        name = stage['name']
        casatools.log.origin(name)
        
        logger = self.inputs.logger
        logger.logHTML('<li>')
        logger.openNode(name, name, True)

        # write tag name for this stage to the logfile
        casatools.log.postHTML('<a name="{0}">{1}</a>'.format(
            'stage{0}'.format(name), name))

        context = self.inputs.context
        results = self.inputs.results
        
        try:
            logger.logHTML('<h2>Description</h2>')

            logger.logHTML('<h2>Results</h2>')

            if results.caltables:
                description = '''The following calibration tables were 
                 generated by this task:<ul>'''
                for caltable in results.caltables:
                    description += '<li>%s from %s' % (
                     os.path.basename(caltable.name), caltable.job)
                description += '</ul>'
            else:
                description = '''No calibration tables were generated by this 
                 task.'''
            logger.logHTML(description)

            if self.inputs.plot:
                heading = True 

                # display the view first; the Tsys shape metric
                if results.view:
                    display_inputs = displays.ImageDisplay.Inputs(context, results)

                    # plot() returns the list of Plots it has generated, so we just
                    # need to add each one to the HTML logger with logger.addPlot()
                    plots = displays.ImageDisplay(display_inputs).plot()
                    if plots and heading:
                        logger.logHTML('<h3>Displays</h3>')
                        heading = False
                    map(logger.addPlot, plots)

                # now display the Tsys data themselves
                for description in results.descriptions():
                    childresults = results.getchild(description, 'tsysmedians')
                    display_inputs = displays.SliceDisplay.Inputs(context, 
                     childresults)

                    plots = displays.SliceDisplay(display_inputs).plot()
                    if plots and heading:
                        logger.logHTML('<h3>Displays</h3>')
                        heading = False
                    map(logger.addPlot, plots)

                    for desc2 in childresults.descriptions():
                        child2 = childresults.getchild(desc2, 'tsysspectra')
                        display_inputs = displays.SliceDisplay.Inputs(context, 
                         child2)

                        if plots and heading:
                            logger.logHTML('<h3>Displays</h3>')
                            heading = False
                        plots = displays.SliceDisplay(display_inputs).plot()
                        map(logger.addPlot, plots)

            logger.closeNode()
            return results
            
        except KeyboardInterrupt:
            print 'keyboard interrupt in doStage' 
            raise 
        except:
            logger.logHTML('<p>Failed with exception<pre>')
            traceback.print_exc()
            raise
#            traceback.print_exc(file=logger._htmlFiles[-1][0])
#            logger.logHTML('</pre>')
#            logger.closeNode()
#            logger.logHTML('<font color="red">Failed</font>')
        finally:
            sys.stdout.flush()
