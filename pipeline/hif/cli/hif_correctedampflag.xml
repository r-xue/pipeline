<casaxml xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd file:///opt/casa/code/xmlcasa/xml/casa.xsd" xmlns="http://casa.nrao.edu/schema/psetTypes.html" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

<task type="function" name="hif_correctedampflag" category="pipeline">

<shortdescription>Flag corrected - model amplitudes based on calibrators.</shortdescription>

<description>
Flag corrected - model amplitudes based on calibrators.

Output

results -- If pipeline mode is 'getinputs' then None is returned. Otherwise
           the results object for the pipeline task is returned.
</description>

<input>
  <param type="stringVec" name="vis" subparam="true">
    <shortdescription>List of input MeasurementSets</shortdescription>
    <description>The list of input MeasurementSets. Defaults to the list of
                 MeasurementSets specified in the h_init or hif_importdata task.
                 '': use all MeasurementSets in the context
                 Examples: 'ngc5921.ms', ['ngc5921a.ms', ngc5921b.ms', 'ngc5921c.ms']
    </description>
    <value/>
  </param>

  <param type="string" name="intent" subparam="true">
    <shortdescription>Data intent to use in selecting data to evaluate for flagging</shortdescription>
    <description>A string containing a comma delimited list of intents against
                 which the selected fields are matched. If undefined (default),
                 it will select all data with the BANDPASS intent.

                 Example: intent='*PHASE*'
    </description>
    <value/>
  </param>

  <param type="string" name="field" subparam="true">
    <shortdescription>Field ids to use in selecting data to evaluate for flagging</shortdescription>
    <description>The list of field names or field ids for which bandpasses are
                 computed. If undefined (default), it will select all fields.

                 Examples: field='3C279', '3C279, M82'
    </description>
    <value/>
  </param>

  <param type="string" name="spw" subparam="true">
    <shortdescription>Spectral windows to use in selecting data to evaluate for flagging, \'\' for all</shortdescription>
    <description>The list of spectral windows and channels for which bandpasses
                 are computed. If undefined (default), it will select all
                 science spectral windows.

                 Example: spw='11,13,15,17'
    </description>
    <value/>
  </param>

  <param type="double" name="antnegsig" subparam="true">
    <description>Lower sigma threshold for identifying outliers as a result of bad antennas within individual timestamps</description>
    <value>4.0</value>
  </param>

  <param type="double" name="antpossig" subparam="true">
    <description>Upper sigma threshold for identifying outliers as a result of bad antennas within individual timestamps</description>
    <value>4.6</value>
  </param>

  <param type="double" name="tmantint" subparam="true">
    <description>Threshold for maximum fraction of timestamps that are allowed to contain outliers</description>
    <value>0.063</value>
  </param>

  <param type="double" name="tmint" subparam="true">
    <description>Initial threshold for maximum fraction of &quot;outlier timestamps&quot; over &quot;total timestamps&quot; that a baseline may be a part of</description>
    <value>0.085</value>
  </param>

  <param type="double" name="tmbl" subparam="true">
    <description>Initial threshold for maximum fraction of &quot;bad baselines&quot; over &quot;all timestamps&quot; that an antenna may be a part of</description>
    <value>0.175</value>
  </param>

  <param type="double" name="antblnegsig" subparam="true">
    <description>Lower sigma threshold for identifying outliers as a result of &quot;bad baselines&quot; and/or &quot;bad antennas&quot; within baselines (across all timestamps)</description>
    <value>3.4</value>
  </param>

  <param type="double" name="antblpossig" subparam="true">
    <description>Upper sigma threshold for identifying outliers as a result of &quot;bad baselines&quot; and/or &quot;bad antennas&quot; within baselines (across all timestamps)</description>
    <value>3.2</value>
  </param>

  <param type="double" name="relaxed_factor" subparam="true">
    <description>Relaxed value to set the threshold scaling factor to under certain conditions (see task description)</description>
    <value>2.0</value>
  </param>

  <param type="int" name="niter" subparam="true">
    <shortdescription>Maximum number of times to iterate on evaluation of flagging heuristics.</shortdescription>
    <description>Maximum number of times to iterate on evaluation of flagging
                 heuristics. If an iteration results in no new flags, then
                 subsequent iterations are skipped.
    </description>
    <value>2</value>
  </param>

  <param type="string" name="pipelinemode">
    <shortdescription>The pipeline operations mode</shortdescription>
    <description>The pipeline operating mode.
                 In 'automatic' mode the pipeline determines the values of all
                 context defined pipeline inputs automatically.
                 In 'interactive' mode the user can set the pipeline context
                 defined parameters manually.
                 In 'getinputs' mode the user can check the settings of all
                 pipeline parameters without running the task.
    </description>
    <value>automatic</value>
    <allowed kind="enum">
      <value>automatic</value>
      <value>interactive</value>
      <value>getinputs</value>
    </allowed>
  </param>

  <param type="bool" name="dryrun" subparam="true">
    <description>Run the task (False) or just display the command (True)</description>
       <value>False</value>
  </param>

  <param type="bool" name="acceptresults" subparam="true">
    <shortdescription>Automatically apply results to context</shortdescription>
    <description>Add the results of the task to the pipeline context (True) or
                 reject them (False).
    </description>
    <value>True</value>
  </param>

  <constraints>
    <when param="pipelinemode">
      <equals type="string" value="automatic"/>
      <equals type="string" value="interactive">
        <default param="vis"><value type="stringVec"/></default>
        <default param="intent"><value type="string"/></default>
        <default param="field"><value type="string"/></default>
        <default param="spw"><value type="string"/></default>
        <default param="antnegsig"><value type="double">4.0</value></default>
        <default param="antpossig"><value type="double">4.6</value></default>
        <default param="tmantint"><value type="double">0.063</value></default>
        <default param="tmint"><value type="double">0.085</value></default>
        <default param="tmbl"><value type="double">0.175</value></default>
        <default param="antblnegsig"><value type="double">3.4</value></default>
        <default param="antblpossig"><value type="double">3.2</value></default>
        <default param="relaxed_factor"><value type="double">2.0</value></default>
        <default param="niter"><value type="int">2</value></default>
        <default param="dryrun"><value type="bool">False</value></default>
        <default param="acceptresults"><value type="bool">True</value></default>
      </equals>
      <equals type="string" value="getinputs">
        <default param="vis"><value type="stringVec"/></default>
      </equals>
    </when>
  </constraints>
</input>



<example>
Run default flagging on bandpass calibrator with recommended settings:

    hif_correctedampflag()
</example>
<returns>any</returns></task>
</casaxml>
