<casaxml xsi:schemaLocation="http://casa.nrao.edu/schema/casa.xsd file:///opt/casa/code/xmlcasa/xml/casa.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://casa.nrao.edu/schema/psetTypes.html">

<task category="pipeline" name="hif_bandpass" type="function">
<shortdescription>Compute bandpass calibration solutions</shortdescription>
<description>
Compute amplitude and phase as a function of frequency for each spectral
window in each MeasurementSet.  

Previous calibration can be applied on the fly.


Description

hif_bandpass computes a bandpass solution for every specified science
spectral window. By default a 'phaseup' pre-calibration is performed
and applied on the fly to the data, before the bandpass is computed.

The hif_refant task may be used to precompute a prioritized list of
reference antennas.


Issues

There is currently some discussion about whether or not to do an 'ampup'
operations at the same time as the 'phaseup'. This is not required for the
bandpass computation but the amplitude information may provide a useful quality
assessment measure.

The specified minsnr parameter is currently applied to the bandpass
solution computation but not the 'phaseup' computation. Some noisy
solutions in the phaseup may not be properly rejected.


Output

results -- If pipeline mode is 'getinputs' then None is returned. Otherwise
           the results object for the pipeline task is returned.
</description>
<input>

  <param subparam="true" name="vis" type="stringVec">
    <shortdescription>List of input MeasurementSets</shortdescription>
    <description>The list of input MeasurementSets. Defaults to the list of
                 MeasurementSets specified in the h_init or hif_importdata task.
                 '': use all MeasurementSets in the context
                 Examples: 'ngc5921.ms', ['ngc5921a.ms', ngc5921b.ms', 'ngc5921c.ms']
    </description>
    <value/>
  </param>

  <param subparam="true" name="caltable" type="stringVec">
    <shortdescription>List of output caltables</shortdescription>
    <description>The list of output calibration tables. Defaults to the
                 standard pipeline naming convention.

                 Example: caltable=['M82.gcal', 'M82B.gcal']
    </description>
    <value/>
  </param>

  <param subparam="true" name="field" type="string">
    <shortdescription>Set of data selection field names or ids</shortdescription>
    <description>The list of field names or field ids for which bandpasses are
                 computed. Defaults to all fields.

                 Examples: field='3C279', field='3C279, M82'
    </description>
    <value/>
  </param>

  <param subparam="true" name="intent" type="string">
    <shortdescription>Set of data selection intents</shortdescription>
    <description> A string containing a comma delimited list of intents against
                  which the selected fields are matched.  Defaults to all data
                  with bandpass intent.

                  Example: intent='*PHASE*'
    </description>
    <value/>
  </param>

  <param subparam="true" name="spw" type="string">
    <shortdescription>Set of data selection spectral window/channels</shortdescription>
    <description>The list of spectral windows and channels for which bandpasses
                 are computed. Defaults to all science spectral windows.

                 Example: spw='11,13,15,17'
    </description>
    <value/>
  </param>

  <param subparam="true" name="antenna" type="string">
    <description>Set of data selection antenna IDs</description>
    <value/>
  </param>

  <param name="phaseup" type="bool">
    <shortdescription>Phaseup before computing the bandpass</shortdescription>
    <description>Do a phaseup on the data before computing the bandpass
                 solution.
    </description>
    <value>True</value>
  </param>

  <param subparam="true" name="phaseupsolint" type="any">
    <shortdescription>Phaseup correction solution interval</shortdescription>
    <description>The phase correction solution interval in CASA syntax. 
                 Used when phaseup is True.

                 Example: phaseupsolint=300
    </description>
    <any type="variant"/>
    <value type="string">int</value>
  </param>

  <param subparam="true" name="phaseupbw" type="string">
    <shortdescription>Bandwidth to use for phaseup</shortdescription>
    <description>Bandwidth to be used for phaseup. Defaults to 500MHz.
                 Used when phaseup is True.

                 Examples: phaseupbw='' to use entire bandpass
                           phaseupbw='500MHz' to use central 500MHz
    </description>
    <value/>
  </param>

  <param name="solint" type="any">
    <shortdescription>Solution intervals</shortdescription>
    <description>Time and channel solution intervals in CASA syntax.

                 Examples: solint='inf,10ch', 'inf'
    </description>
    <any type="variant"/>
    <value type="string">inf</value>
  </param>

  <param name="combine" type="string">
    <shortdescription>Data axes which to combine for solve (scan, spw, and/or field)</shortdescription>
    <description>Data axes to combine for solving. Axes are '', 'scan', 'spw',
                 'field' or any comma-separated combination.

                 Example: combine='scan,field' 
    </description>
    <value>scan</value>
  </param>

  <param subparam="true" name="refant" type="string">
    <shortdescription>Reference antenna names</shortdescription>
    <description>Reference antenna names. Defaults to the value(s) stored in
                 the pipeline context. If undefined in the pipeline context
                 defaults to the CASA reference antenna naming scheme.

                 Examples: refant='DV01', refant='DV06,DV07'
    </description>
    <value/>
  </param>

  <param name="solnorm" type="bool">
    <description>Normalise the bandpass solution</description>
    <value type="bool">True</value>
  </param>

  <param subparam="true" name="minblperant" type="int">
    <shortdescription>Minimum baselines per antenna required for solve</shortdescription>
    <description>Minimum number of baselines required per antenna for each
                 solve. Antennas with fewer baselines are excluded from
                 solutions.
    </description>
    <value>4</value>
  </param>

  <param subparam="true" name="minsnr" type="double">
    <description>Reject solutions below this SNR</description>
    <value>3.0</value>
  </param>

  <param name="pipelinemode" type="string">
    <shortdescription>The pipeline operating mode</shortdescription>
    <description>The pipeline operating mode.
                 In 'automatic' mode the pipeline determines the values of all
                 context defined pipeline inputs automatically.
                 In 'interactive' mode the user can set the pipeline context
                 defined parameters manually.
                 In 'getinputs' mode the user can check the settings of all
                 pipeline parameters without running the task.
    </description>
    <value>automatic</value>
    <allowed kind="enum">
      <value>automatic</value>
      <value>interactive</value>
      <value>getinputs</value>
    </allowed>
  </param>

  <param subparam="true" name="dryrun" type="bool">
    <description>Run the task (False) or just display the command (True)</description>
    <value>False</value>
  </param>

  <param subparam="true" name="acceptresults" type="bool">
    <shortdescription>Add the results to the pipeline context</shortdescription>
    <description>Add the results of the task to the pipeline context (True) or
                 reject them (False).
    </description>
    <value>True</value>
  </param>

  <constraints>

    <when param="phaseup">
      <equals value="True" type="bool">
        <default param="phaseupsolint"><value type="string">int</value></default>
        <default param="phaseupbw"><value type="string"/></default>
      </equals>
      <equals value="False" type="bool">
      </equals>
    </when>

    <when param="pipelinemode">
      <equals value="automatic" type="string"/>
      <equals value="interactive" type="string">
        <default param="vis"><value type="stringVec"/></default>
        <default param="caltable"><value type="stringVec"/></default>
        <default param="field"><value type="string"/></default>
        <default param="intent"><value type="string"/></default>
        <default param="spw"><value type="string"/></default>
        <default param="antenna"><value type="string"/></default>
        <default param="refant"><value type="string"/></default>
        <default param="solnorm"><value type="bool">True</value></default>
        <default param="dryrun"><value type="bool">False</value></default>
        <default param="acceptresults"><value type="bool">True</value></default>
      </equals>
      <equals value="getinputs" type="string">
        <default param="vis"><value type="stringVec"/></default>
        <default param="caltable"><value type="stringVec"/></default>
        <default param="field"><value type="string"/></default>
        <default param="intent"><value type="string"/></default>
        <default param="spw"><value type="string"/></default>
        <default param="antenna"><value type="string"/></default>
        <default param="refant"><value type="string"/></default>
        <default param="solnorm"><value type="bool">True</value></default>
      </equals>
    </when>
  </constraints>

</input>


<returns>any</returns>

<example>
1. Compute a channel bandpass for all visibility files in the pipeline
context using the CASA reference antenna determination scheme:

    hif_bandpass()

2. Same as the above but precompute a prioritized reference antenna list:

    hif_refant()
    hif_bandpass()
</example>
</task>
</casaxml>
